{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/ElementSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nimport { elements } from '../utilities/constants';\nconst useStyles = makeStyles(theme => ({\n  listContainer: {\n    border: \"1pt solid midnightblue\"\n  }\n}));\n\nconst ElementSelect = () => {\n  _s();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const inputContext = useContext(InputParamsContext);\n  const classes = useStyles();\n\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    const newElems = inputContext.inputParams.elems;\n    newElems[0] = { ...newElems[0],\n      name: elements[index].name,\n      reduce: elements[index].reduce\n    };\n    inputContext.updateInputParams({\n      elems: newElems\n    });\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      className: classes.listContainer,\n      \"aria-label\": \"Element selection\",\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        \"aria-haspopup\": \"true\",\n        \"aria-controls\": \"element-menu\",\n        \"aria-label\": \"selected element\",\n        onClick: handleClickListItem,\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: \"Click to select element\",\n          secondary: \"Currently selected: \" + elements[selectedIndex].menuName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"element-menu\",\n      anchorEl: anchorEl,\n      keepMounted: true,\n      open: Boolean(anchorEl),\n      onClose: handleClose,\n      children: elements.map((option, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n        selected: index === selectedIndex,\n        onClick: event => handleMenuItemClick(event, index),\n        children: option.menuName\n      }, option.menuName, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ElementSelect, \"EEL20mGN6GgEhAV/uoHNj25MvQM=\", false, function () {\n  return [useStyles];\n});\n\n_c = ElementSelect;\nexport default ElementSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ElementSelect\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/ElementSelect.js"],"names":["React","useContext","useState","List","ListItem","ListItemText","Menu","MenuItem","makeStyles","InputParamsContext","elements","useStyles","theme","listContainer","border","ElementSelect","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","inputContext","classes","handleClickListItem","event","currentTarget","handleMenuItemClick","index","newElems","inputParams","elems","name","reduce","updateInputParams","handleClose","menuName","Boolean","map","option"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAEI,KAAD,KAAY;AACxCC,EAAAA,aAAa,EAAE;AACdC,IAAAA,MAAM,EAAE;AADM;AADyB,CAAZ,CAAD,CAA5B;;AAMA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAMkB,YAAY,GAAGnB,UAAU,CAACQ,kBAAD,CAA/B;AACA,QAAMY,OAAO,GAAGV,SAAS,EAAzB;;AAEA,QAAMW,mBAAmB,GAAIC,KAAD,IAAW;AACtCN,IAAAA,WAAW,CAACM,KAAK,CAACC,aAAP,CAAX;AACA,GAFD;;AAIA,QAAMC,mBAAmB,GAAG,CAACF,KAAD,EAAQG,KAAR,KAAkB;AAC7CP,IAAAA,gBAAgB,CAACO,KAAD,CAAhB;AACAT,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,UAAMU,QAAQ,GAAGP,YAAY,CAACQ,WAAb,CAAyBC,KAA1C;AACAF,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,EAAC,GAAGA,QAAQ,CAAC,CAAD,CAAZ;AAAiBG,MAAAA,IAAI,EAAEpB,QAAQ,CAACgB,KAAD,CAAR,CAAgBI,IAAvC;AAA6CC,MAAAA,MAAM,EAAErB,QAAQ,CAACgB,KAAD,CAAR,CAAgBK;AAArE,KAAd;AACAX,IAAAA,YAAY,CAACY,iBAAb,CAA+B;AAACH,MAAAA,KAAK,EAAEF;AAAR,KAA/B;AACA,GAND;;AAQA,QAAMM,WAAW,GAAG,MAAM;AACzBhB,IAAAA,WAAW,CAAC,IAAD,CAAX;AACA,GAFD;;AAIA,sBACC;AAAA,4BACC,QAAC,IAAD;AAAM,MAAA,SAAS,EAAEI,OAAO,CAACR,aAAzB;AAAwC,oBAAW,mBAAnD;AAAA,6BACC,QAAC,QAAD;AACC,QAAA,MAAM,MADP;AAEC,yBAAc,MAFf;AAGC,yBAAc,cAHf;AAIC,sBAAW,kBAJZ;AAKC,QAAA,OAAO,EAAES,mBALV;AAAA,+BAOC,QAAC,YAAD;AAAc,UAAA,OAAO,EAAC,yBAAtB;AAAgD,UAAA,SAAS,EAAE,yBAAuBZ,QAAQ,CAACQ,aAAD,CAAR,CAAwBgB;AAA1G;AAAA;AAAA;AAAA;AAAA;AAPD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD,eAYC,QAAC,IAAD;AACC,MAAA,EAAE,EAAC,cADJ;AAEC,MAAA,QAAQ,EAAElB,QAFX;AAGC,MAAA,WAAW,MAHZ;AAIC,MAAA,IAAI,EAAEmB,OAAO,CAACnB,QAAD,CAJd;AAKC,MAAA,OAAO,EAAEiB,WALV;AAAA,gBAOEvB,QAAQ,CAAC0B,GAAT,CAAa,CAACC,MAAD,EAASX,KAAT,kBACb,QAAC,QAAD;AAEC,QAAA,QAAQ,EAAEA,KAAK,KAAKR,aAFrB;AAGC,QAAA,OAAO,EAAGK,KAAD,IAAWE,mBAAmB,CAACF,KAAD,EAAQG,KAAR,CAHxC;AAAA,kBAKEW,MAAM,CAACH;AALT,SACMG,MAAM,CAACH,QADb;AAAA;AAAA;AAAA;AAAA,cADA;AAPF;AAAA;AAAA;AAAA;AAAA,YAZD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAgCA,CAtDD;;GAAMnB,a;UAIWJ,S;;;KAJXI,a;AAwDN,eAAeA,aAAf","sourcesContent":["import React, {useContext, useState} from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nimport { elements } from '../utilities/constants';\n\nconst useStyles = makeStyles((theme) => ({\n\tlistContainer: {\n\t\tborder: \"1pt solid midnightblue\",\n\t},\n}));\n\nconst ElementSelect = () => {\n\tconst [anchorEl, setAnchorEl] = useState(null);\n\tconst [selectedIndex, setSelectedIndex] = useState(0);\n\tconst inputContext = useContext(InputParamsContext);\n\tconst classes = useStyles();\n\n\tconst handleClickListItem = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleMenuItemClick = (event, index) => {\n\t\tsetSelectedIndex(index);\n\t\tsetAnchorEl(null);\n\t\tconst newElems = inputContext.inputParams.elems;\n\t\tnewElems[0] = {...newElems[0], name: elements[index].name, reduce: elements[index].reduce}\n\t\tinputContext.updateInputParams({elems: newElems});\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<List className={classes.listContainer} aria-label=\"Element selection\">\n\t\t\t\t<ListItem\n\t\t\t\t\tbutton\n\t\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t\taria-controls=\"element-menu\"\n\t\t\t\t\taria-label=\"selected element\"\n\t\t\t\t\tonClick={handleClickListItem}\n\t\t\t\t>\n\t\t\t\t\t<ListItemText primary=\"Click to select element\" secondary={\"Currently selected: \"+elements[selectedIndex].menuName} />\n\t\t\t\t</ListItem>\n\t\t\t</List>\n\t\t\t<Menu\n\t\t\t\tid=\"element-menu\"\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={handleClose} \n\t\t\t>\n\t\t\t\t{elements.map((option, index) => (\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tkey={option.menuName}\n\t\t\t\t\t\tselected={index === selectedIndex}\n\t\t\t\t\t\tonClick={(event) => handleMenuItemClick(event, index)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option.menuName}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t))}\n\t\t\t</Menu>\n\t\t</div>\n\t);\n}\n\nexport default ElementSelect;"]},"metadata":{},"sourceType":"module"}