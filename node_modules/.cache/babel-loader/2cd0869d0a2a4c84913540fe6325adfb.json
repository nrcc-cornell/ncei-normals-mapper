{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InfoAdornment from './InfoAdornment';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\nconst useStyles = makeStyles(theme => ({\n  colorsContainer: {\n    marginTop: \"0.75em\"\n  },\n  colorFormControl: {\n    width: \"100%\"\n  },\n  colorInputLabel: {\n    color: \"rgba(0,0,0,0.87)\"\n  },\n  colorbarContainer: {\n    marginTop: \"0.75em\"\n  },\n  listContainer: {\n    marginTop: \"0.5em\",\n    border: \"1pt solid lightgray\",\n    padding: 0\n  }\n}));\n\nconst ColorsSelect = () => {\n  _s();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [colors, setColors] = useState(\"\");\n  const [colorError, setColorError] = useState(false);\n  const classes = useStyles();\n  const inputContext = useContext(InputParamsContext);\n\n  const colormaps = require('../utilities/colorbrewer.json');\n\n  const colormap_keys = Object.keys(colormaps);\n\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index, cmp) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    const levelcnt = inputContext.levels.client.length || inputContext.levels.server.length;\n    console.log(inputContext.levels.client.length + \" \" + inputContext.levels.server.length);\n    const newColors = colormaps[cmp][levelcnt];\n    console.log(newColors);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleColorChange = event => {\n    const newcolors = event.target.value.replace(\" \", \"\");\n    ;\n    setColors(newcolors);\n\n    if (inputContext.levels.client.length === 0) {\n      inputContext.updateInputParams({\n        image: { ...inputContext.inputParams.image,\n          cmap: newcolors,\n          levels: inputContext.levels.server.join(\",\")\n        }\n      });\n    } else {\n      inputContext.updateInputParams({\n        image: { ...inputContext.inputParams.image,\n          cmap: newcolors\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (inputContext.colors.server) {\n      const newcolors = inputContext.colors.server.join(\",\");\n      setColors(newcolors);\n    }\n  }, [inputContext.colors.server]);\n  useEffect(() => {\n    if (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0 && colors) {\n      const levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n      const colorLength = colors.split(\",\").length;\n      setColorError(levelLength !== colorLength - 1);\n    }\n  }, [inputContext.inputParams.image.levels, colors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.colorsContainer,\n    children: [/*#__PURE__*/_jsxDEV(List, {\n      className: classes.listContainer,\n      \"aria-label\": \"color selection\",\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        button: true,\n        \"aria-haspopup\": \"true\",\n        \"aria-controls\": \"color-map-menu\",\n        \"aria-label\": \"selected-color\",\n        onClick: handleClickListItem,\n        children: /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: \"Click to change color map\",\n          secondary: \"Currently selected: \" + colormap_keys[selectedIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      id: \"color-map-menu\",\n      anchorEl: anchorEl,\n      keepMounted: true,\n      open: Boolean(anchorEl),\n      onClose: handleClose,\n      children: colormap_keys.map((cmp, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n        selected: index === selectedIndex,\n        value: cmp,\n        onClick: event => handleMenuItemClick(event, index, cmp),\n        children: cmp\n      }, cmp, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      variant: \"outlined\",\n      className: classes.colorFormControl,\n      error: colorError,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: \"colorInput\",\n        className: classes.colorInputLabel,\n        children: \"Colors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n        value: colors,\n        id: \"colorInput\",\n        label: \"Colors\",\n        margin: \"dense\",\n        inputProps: {\n          spellCheck: false\n        },\n        onChange: handleColorChange,\n        endAdornment: /*#__PURE__*/_jsxDEV(InfoAdornment, {\n          content: infoText.colors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n        children: colorError ? \"Must have one more color than levels\" : \"Comma-separated color code list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.colorbarContainer,\n      children: colors && /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        padding: \"none\",\n        \"aria-label\": \"color table\",\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: colors.split(\",\").map((cs, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                backgroundColor: \"\" + cs + \"\"\n              },\n              children: \"\\xA0\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 10\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ColorsSelect, \"h9psPBjgFtPXehGN5DfPOyqppCM=\", false, function () {\n  return [useStyles];\n});\n\n_c = ColorsSelect;\nexport default ColorsSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorsSelect\");","map":{"version":3,"sources":["/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js"],"names":["React","useState","useEffect","useContext","makeStyles","FormControl","InputLabel","OutlinedInput","FormHelperText","Table","TableBody","TableCell","TableContainer","TableRow","List","ListItem","ListItemText","Menu","MenuItem","InfoAdornment","InputParamsContext","infoText","useStyles","theme","colorsContainer","marginTop","colorFormControl","width","colorInputLabel","color","colorbarContainer","listContainer","border","padding","ColorsSelect","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","colors","setColors","colorError","setColorError","classes","inputContext","colormaps","require","colormap_keys","Object","keys","handleClickListItem","event","currentTarget","handleMenuItemClick","index","cmp","levelcnt","levels","client","length","server","console","log","newColors","handleClose","handleColorChange","newcolors","target","value","replace","updateInputParams","image","inputParams","cmap","join","levelLength","split","colorLength","Boolean","map","spellCheck","cs","i","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InfoAdornment from './InfoAdornment';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\n\nconst useStyles = makeStyles((theme) => ({\n    colorsContainer: {\n        marginTop: \"0.75em\",\n    },\n    colorFormControl: {\n        width: \"100%\",\n    },\n\tcolorInputLabel: {\n\t\tcolor: \"rgba(0,0,0,0.87)\",\n\t},\n    colorbarContainer: {\n        marginTop: \"0.75em\",\n    },\n    listContainer: {\n\t\tmarginTop: \"0.5em\",\n\t\tborder: \"1pt solid lightgray\",\n\t\tpadding: 0,\n\t},\n}));\n\nconst ColorsSelect = () => {\n    const [anchorEl, setAnchorEl] = useState(null);\n\tconst [selectedIndex, setSelectedIndex] = useState(0);\n\tconst [ colors, setColors ] = useState(\"\");\n\tconst [ colorError, setColorError ] = useState(false);\n\tconst classes = useStyles();\n\tconst inputContext = useContext(InputParamsContext);\n\n    const colormaps = require('../utilities/colorbrewer.json');\n    const colormap_keys = Object.keys(colormaps);\n\n    const handleClickListItem = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n    const handleMenuItemClick = (event, index, cmp) => {\n\t\tsetSelectedIndex(index);\n\t\tsetAnchorEl(null);\n        const levelcnt = inputContext.levels.client.length || inputContext.levels.server.length;\n        console.log(inputContext.levels.client.length + \" \" + inputContext.levels.server.length)\n\t\tconst newColors = colormaps[cmp][levelcnt];\n        console.log(newColors);\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\t\n\tconst handleColorChange = (event) => {\n\t\tconst newcolors = event.target.value.replace(\" \",\"\");;\n\t\tsetColors(newcolors);\n        if (inputContext.levels.client.length === 0) {\n            inputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newcolors, levels: inputContext.levels.server.join(\",\")}});\n        } else {\n    \t\tinputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newcolors}});\n        }\n\t};\n\n\tuseEffect(() => {\n\t\tif (inputContext.colors.server) {\n\t\t\tconst newcolors = inputContext.colors.server.join(\",\");\n\t\t\tsetColors(newcolors);\t\n\t\t}\n\t}, [inputContext.colors.server]);\n\n\tuseEffect(() => {\n\t\tif (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0 && colors) {\n\t\t\tconst levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n            const colorLength = colors.split(\",\").length;\n            setColorError(levelLength !== colorLength - 1);\n\t\t}\n\t}, [inputContext.inputParams.image.levels, colors]);\n\n\treturn ( \n        <div className={classes.colorsContainer}>\n            <List className={classes.listContainer} aria-label=\"color selection\">\n\t\t\t\t<ListItem\n\t\t\t\t\tbutton\n\t\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t\taria-controls=\"color-map-menu\"\n\t\t\t\t\taria-label=\"selected-color\"\n\t\t\t\t\tonClick={handleClickListItem}\n\t\t\t\t>\n\t\t\t\t\t<ListItemText primary=\"Click to change color map\" secondary={\"Currently selected: \"+colormap_keys[selectedIndex]} />\n\t\t\t\t</ListItem>\n\t\t\t</List>\n\t\t\t<Menu\n\t\t\t\tid=\"color-map-menu\"\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={handleClose} \n\t\t\t>\n\t\t\t\t{colormap_keys.map((cmp, index) => (\n\t\t\t\t\t<MenuItem\n\t\t\t\t\t\tkey={cmp}\n\t\t\t\t\t\tselected={index === selectedIndex}\n                        value={cmp}\n\t\t\t\t\t\tonClick={(event) => handleMenuItemClick(event, index, cmp)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{cmp}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t))}\n\t\t\t</Menu>\n\n            <FormControl variant=\"outlined\" className={classes.colorFormControl} error={colorError}>\n                <InputLabel htmlFor=\"colorInput\" className={classes.colorInputLabel}>Colors</InputLabel>\n                <OutlinedInput\n                    value={colors}\n                    id=\"colorInput\"\n                    label=\"Colors\"\n                    margin=\"dense\"\n                    inputProps={{ spellCheck: false }}\n                    onChange={handleColorChange}\n                    endAdornment={<InfoAdornment content={infoText.colors} />}\n                />\n                <FormHelperText>{colorError ? \"Must have one more color than levels\" : \"Comma-separated color code list\"}</FormHelperText>\n            </FormControl>\n\t\t\t<TableContainer className={classes.colorbarContainer}>\n\t\t\t\t{colors &&\n\t\t\t\t\t<Table size=\"small\" padding=\"none\" aria-label=\"color table\">\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t{colors.split(\",\").map((cs, i) => (\n\t\t\t\t\t\t\t\t\t<TableCell key={i} style={{backgroundColor:\"\" + cs + \"\"}}>&nbsp;</TableCell>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableRow>\t\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t}\n\t\t\t</TableContainer>\n\t\t</div>\n\t);\n}\n\nexport default ColorsSelect;"]},"metadata":{},"sourceType":"module"}