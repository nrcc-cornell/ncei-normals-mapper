{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/CountySelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport InputParamsContext from './InputParamsContext';\n\nconst CountySelect = props => {\n  _s();\n\n  const {\n    postals,\n    stateType\n  } = props;\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [counties, setCounties] = useState();\n  const [fetchError, setFetchError] = useState();\n  const [loading, setLoading] = useState(false);\n  const inputContext = useContext(InputParamsContext);\n\n  const fetchGeneral = postals => {\n    const jsonparams = JSON.stringify({\n      state: postals,\n      meta: \"name,id\"\n    });\n    setCounties(null);\n\n    if (postals.length >= 2) {\n      fetch(\"https://data.rcc-acis.org/General/\" + stateType, {\n        body: jsonparams,\n        method: \"POST\",\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        if (!response.ok) {\n          setFetchError(\"Error fetching the list\");\n          return;\n        }\n\n        return response.json();\n      }).then(response => {\n        if (response.meta && response.meta.length) {\n          setCounties(response.meta);\n          inputContext.updateInputParams({\n            [stateType]: response.meta[0].id\n          });\n        } else {\n          setFetchError(\"No list for \" + postals);\n        }\n      }).catch(err => {\n        if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n          setFetchError(\"Invalid request\");\n        } else {\n          setFetchError(err.message);\n        }\n\n        ;\n      }).finally(() => {\n        setLoading(false);\n      });\n    } else {\n      setFetchError(\"Specify valid state above\");\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    // Reset \n    setFetchError();\n    setLoading(true); // Get list\n\n    fetchGeneral(postals); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [postals]);\n\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    inputContext.updateInputParams({\n      [stateType]: counties[index].id\n    });\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [counties && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        \"aria-label\": stateType + \" selection\",\n        children: /*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          \"aria-haspopup\": \"true\",\n          \"aria-controls\": stateType + \"-menu\",\n          \"aria-label\": \"selected \" + stateType,\n          onClick: handleClickListItem,\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: \"Click to select \" + stateType,\n            secondary: counties[selectedIndex].name.replace(/County|Parish/gi, \"\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        id: stateType + \"-menu\",\n        anchorEl: anchorEl,\n        keepMounted: true,\n        open: Boolean(anchorEl),\n        onClose: handleClose,\n        children: counties.map((option, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n          selected: index === selectedIndex,\n          onClick: event => handleMenuItemClick(event, index),\n          children: option.name.replace(/County|Parish/gi, \"\")\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n      size: \"1em\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), fetchError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: fetchError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CountySelect, \"9YkemuWyhfi2fU3bWYFc6+OX2JA=\");\n\n_c = CountySelect;\nexport default CountySelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountySelect\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/CountySelect.js"],"names":["React","useEffect","useState","useContext","List","ListItem","ListItemText","Menu","MenuItem","CircularProgress","InputParamsContext","CountySelect","props","postals","stateType","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","counties","setCounties","fetchError","setFetchError","loading","setLoading","inputContext","fetchGeneral","jsonparams","JSON","stringify","state","meta","length","fetch","body","method","headers","then","response","ok","json","updateInputParams","id","catch","err","message","includes","finally","handleClickListItem","event","currentTarget","handleMenuItemClick","index","handleClose","name","replace","Boolean","map","option"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport InputParamsContext from './InputParamsContext';\n\nconst CountySelect = (props) => {\n\tconst { postals, stateType } = props;\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [selectedIndex, setSelectedIndex] = useState(0);\n    const [counties, setCounties] = useState();\n    const [fetchError, setFetchError] = useState();\n\tconst [loading, setLoading] = useState(false);\n\tconst inputContext = useContext(InputParamsContext);\n\n    const fetchGeneral = (postals) => {\n        const jsonparams = JSON.stringify({state: postals, meta: \"name,id\"});\n        setCounties(null);\n        if (postals.length >= 2) {\n            fetch(\"https://data.rcc-acis.org/General/\"+stateType, {body: jsonparams, method: \"POST\", headers: {'Content-Type': 'application/json'}})\n                .then(response => {\n                    if (!response.ok) {\n                        setFetchError(\"Error fetching the list\");\n                        return;\n                    }\n                    return response.json()\n                })\n                .then(response => {\n                    if (response.meta && response.meta.length) {\n                        setCounties(response.meta);\n                        inputContext.updateInputParams({[stateType]: response.meta[0].id});\n                    } else {\n                        setFetchError(\"No list for \"+postals);\n                    }\n                })\n                .catch(err => {\n                    if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n                        setFetchError(\"Invalid request\");\n                    } else {\n                        setFetchError(err.message);\n                    };\n                })\n                .finally(() => {\n                    setLoading(false);\n                });\n        } else {\n            \n            setFetchError(\"Specify valid state above\");\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n\t\t// Reset \n\t\tsetFetchError();\n\t\tsetLoading(true);\n        // Get list\n        fetchGeneral(postals);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [ postals ]);\n\t\n\tconst handleClickListItem = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleMenuItemClick = (event, index) => {\n\t\tsetSelectedIndex(index);\n\t\tsetAnchorEl(null);\n\t\tinputContext.updateInputParams({[stateType]: counties[index].id});\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\treturn (\n        <>\n        {counties &&\n            <>\n            <List aria-label={stateType+\" selection\"}>\n                <ListItem\n                    button\n                    aria-haspopup=\"true\"\n                    aria-controls={stateType+\"-menu\"}\n                    aria-label={\"selected \"+stateType}\n                    onClick={handleClickListItem}\n                >\n                    <ListItemText primary={\"Click to select \"+stateType} secondary={counties[selectedIndex].name.replace(/County|Parish/gi,\"\")} />\n                </ListItem>\n            </List>\n            <Menu\n                id={stateType+\"-menu\"}\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose} \n            >\n                {counties.map((option, index) => (\n                    <MenuItem\n                        key={option.id}\n                        selected={index === selectedIndex}\n                        onClick={(event) => handleMenuItemClick(event, index)}\n                    >\n                        {option.name.replace(/County|Parish/gi,\"\")}\n                    </MenuItem>\n                ))}\n            </Menu>\n            </>\n        }\n        {loading &&\n            <CircularProgress size=\"1em\" />\n        }\n        {fetchError &&\n            <p>{fetchError}</p>\n        }\n        </>\n\t);\n };\n\nexport default CountySelect;\n"]},"metadata":{},"sourceType":"module"}