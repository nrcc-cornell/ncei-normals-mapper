{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/GetImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DisplayMap from \"./DisplayMap\";\nimport InputParamsContext from './InputParamsContext';\nimport { buildParams } from '../utilities/utils';\nimport MapTitle from './MapTitle';\n\nconst GetImage = () => {\n  _s();\n\n  const [mapBlob, setMapBlob] = useState();\n  const [jsonresp, setJsonresp] = useState();\n  const [mapError, setMapError] = useState();\n  const [loading, setLoading] = useState(false);\n  const [submittedParams, setSubmittedParams] = useState();\n  const inputContext = useContext(InputParamsContext);\n\n  const fetchMap = jsonparams => {\n    fetch(\"https://grid2.rcc-acis.org/GridData\", {\n      body: jsonparams,\n      method: \"POST\"\n    }).then(response => {\n      if (!response.ok) {\n        setMapError(\"Error fetching the map\");\n        return;\n      }\n\n      return response.blob();\n    }).then(response => {\n      setMapBlob(URL.createObjectURL(response));\n    }).catch(err => {\n      if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n        setMapError(\"Invalid grid request - \" + jsonparams);\n      } else {\n        setMapError(err.message);\n      }\n\n      ;\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    // Reset \n    setMapBlob();\n    setJsonresp();\n    setMapError();\n    setLoading(true); // Build parameters\n\n    const jsonparams = buildParams(inputContext.inputParams);\n    setSubmittedParams(jsonparams); // Get map\n\n    fetchMap(jsonparams); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputContext.inputParams]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }, this), mapBlob && submittedParams && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(MapTitle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(DisplayMap, {\n        imgsrc: mapBlob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: submittedParams\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true), mapError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", mapError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GetImage, \"bBUvvrc6r2FAu8V2Tu4po8ACLTo=\");\n\n_c = GetImage;\nexport default GetImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetImage\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/GetImage.js"],"names":["React","useEffect","useState","useContext","CircularProgress","DisplayMap","InputParamsContext","buildParams","MapTitle","GetImage","mapBlob","setMapBlob","jsonresp","setJsonresp","mapError","setMapError","loading","setLoading","submittedParams","setSubmittedParams","inputContext","fetchMap","jsonparams","fetch","body","method","then","response","ok","blob","URL","createObjectURL","catch","err","message","includes","finally","inputParams"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAsD,OAAtD;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,EAAtC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,EAAxC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,EAAxC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACgB,eAAD,EAAkBC,kBAAlB,IAAwCjB,QAAQ,EAAtD;AACA,QAAMkB,YAAY,GAAGjB,UAAU,CAACG,kBAAD,CAA/B;;AAEA,QAAMe,QAAQ,GAAIC,UAAD,IAAgB;AAChCC,IAAAA,KAAK,CAAC,qCAAD,EAAwC;AAACC,MAAAA,IAAI,EAAEF,UAAP;AAAmBG,MAAAA,MAAM,EAAE;AAA3B,KAAxC,CAAL,CACEC,IADF,CACOC,QAAQ,IAAI;AACjB,UAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AACjBb,QAAAA,WAAW,CAAC,wBAAD,CAAX;AACA;AACA;;AACD,aAAOY,QAAQ,CAACE,IAAT,EAAP;AACA,KAPF,EAQEH,IARF,CAQOC,QAAQ,IAAI;AACjBhB,MAAAA,UAAU,CAACmB,GAAG,CAACC,eAAJ,CAAoBJ,QAApB,CAAD,CAAV;AACA,KAVF,EAWEK,KAXF,CAWQC,GAAG,IAAI;AACb,UAAIA,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqB,8CAArB,CAAJ,EAA0E;AACzEpB,QAAAA,WAAW,CAAC,4BAA0BO,UAA3B,CAAX;AACA,OAFD,MAEO;AACNP,QAAAA,WAAW,CAACkB,GAAG,CAACC,OAAL,CAAX;AACA;;AAAA;AACD,KAjBF,EAkBEE,OAlBF,CAkBU,MAAM;AACdnB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACA,KApBF;AAqBA,GAtBD;;AAwBAhB,EAAAA,SAAS,CAAC,MAAM;AACf;AACAU,IAAAA,UAAU;AACVE,IAAAA,WAAW;AACXE,IAAAA,WAAW;AACXE,IAAAA,UAAU,CAAC,IAAD,CAAV,CALe,CAMf;;AACA,UAAMK,UAAU,GAAGf,WAAW,CAACa,YAAY,CAACiB,WAAd,CAA9B;AACAlB,IAAAA,kBAAkB,CAACG,UAAD,CAAlB,CARe,CASf;;AACAD,IAAAA,QAAQ,CAACC,UAAD,CAAR,CAVe,CAWf;AACA,GAZQ,EAYN,CAACF,YAAY,CAACiB,WAAd,CAZM,CAAT;AAcA,sBACC;AAAA,eACErB,OAAO,iBACP,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YAFF,EAIEN,OAAO,IAAIQ,eAAX,iBACA;AAAA,8BACC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,UAAD;AACC,QAAA,MAAM,EAAER;AADT;AAAA;AAAA;AAAA;AAAA,cAFD,eAKC;AAAA,kBAAIQ;AAAJ;AAAA;AAAA;AAAA;AAAA,cALD;AAAA,oBALF,EAaEJ,QAAQ,iBACR;AAAA,4BAAWA,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA,kBADD;AAmBA,CAjED;;GAAML,Q;;KAAAA,Q;AAmEN,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState, useContext} from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DisplayMap from \"./DisplayMap\";\nimport InputParamsContext from './InputParamsContext';\nimport { buildParams } from '../utilities/utils';\nimport MapTitle from './MapTitle';\n\nconst GetImage = () => {\n\tconst [mapBlob, setMapBlob] = useState();\n\tconst [jsonresp, setJsonresp] = useState();\n\tconst [mapError, setMapError] = useState();\n\tconst [loading, setLoading] = useState(false);\n\tconst [submittedParams, setSubmittedParams] = useState();\n\tconst inputContext = useContext(InputParamsContext);\n\n\tconst fetchMap = (jsonparams) => {\n\t\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: jsonparams, method: \"POST\"})\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tsetMapError(\"Error fetching the map\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn response.blob();\n\t\t\t})\n\t\t\t.then(response => {\n\t\t\t\tsetMapBlob(URL.createObjectURL(response));\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\t\tsetMapError(\"Invalid grid request - \"+jsonparams);\n\t\t\t\t} else {\n\t\t\t\t\tsetMapError(err.message);\n\t\t\t\t};\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\t// Reset \n\t\tsetMapBlob();\n\t\tsetJsonresp();\n\t\tsetMapError();\n\t\tsetLoading(true);\n\t\t// Build parameters\n\t\tconst jsonparams = buildParams(inputContext.inputParams);\n\t\tsetSubmittedParams(jsonparams);\n\t\t// Get map\n\t\tfetchMap(jsonparams);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [inputContext.inputParams]);\n\n\treturn (\n\t\t<>\n\t\t\t{loading &&\n\t\t\t\t<CircularProgress />\n\t\t\t}\n\t\t\t{mapBlob && submittedParams &&\n\t\t\t\t<>\n\t\t\t\t\t<MapTitle />\n\t\t\t\t\t<DisplayMap \n\t\t\t\t\t\timgsrc={mapBlob}\n\t\t\t\t\t/>\n\t\t\t\t\t<p>{submittedParams}</p>\n\t\t\t\t</>\n\t\t\t}\n\t\t\t{mapError &&\n\t\t\t\t<p>Error: {mapError}</p>\n\t\t\t}\n\t\t</>\n\t);\n}\n\nexport default GetImage;"]},"metadata":{},"sourceType":"module"}