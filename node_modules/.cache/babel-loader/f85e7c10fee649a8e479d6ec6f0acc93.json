{"ast":null,"code":"import { elements, maxbbox } from '../utilities/constants'; //const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n// check bounding box \n\nconst checkBbox = bbox => {\n  if (bbox[0] < maxbbox.west) {\n    bbox[0] = maxbbox.west;\n  }\n\n  if (bbox[1] < maxbbox.south) {\n    bbox[1] = maxbbox.south;\n  }\n\n  if (bbox[2] > maxbbox.east) {\n    bbox[2] = maxbbox.east;\n  }\n\n  if (bbox[3] > maxbbox.north) {\n    bbox[3] = maxbbox.north;\n  }\n\n  return bbox;\n}; // check point \n\n\nconst checkLoc = loc => {\n  loc[0] = parseFloat(loc[0]);\n  loc[1] = parseFloat(loc[1]);\n\n  if (loc[0] < maxbbox.west) {\n    loc[0] = maxbbox.west;\n  }\n\n  if (loc[1] < maxbbox.south) {\n    loc[1] = maxbbox.south;\n  }\n\n  if (loc[0] > maxbbox.east) {\n    loc[0] = maxbbox.east;\n  }\n\n  if (loc[1] > maxbbox.north) {\n    loc[1] = maxbbox.north;\n  }\n\n  return loc;\n}; // find bounding box around one or more states\n\n\nconst multiStateBbox = meta => {\n  var bbox = {\n    xn: 0,\n    xs: 999,\n    xw: 0,\n    xe: -999\n  };\n  meta.forEach(element => {\n    const [w, s, e, n] = [...element.bbox];\n\n    if (n > bbox.xn) {\n      bbox.xn = n;\n    }\n\n    if (s < bbox.xs) {\n      bbox.xs = s;\n    }\n\n    if (w < bbox.xw) {\n      bbox.xw = w;\n    }\n\n    if (e > bbox.xe) {\n      bbox.xe = e;\n    }\n  });\n  const newbbox = [bbox.xw, bbox.xs, bbox.xe, bbox.xn];\n  return checkBbox(newbbox);\n};\n/*\nconst fetchBbox = postals => {\n\tconst jsonparams = JSON.stringify({state: postals, meta: \"bbox\"});\n\tfetch(\"https://data.rcc-acis.org/General/state\", {body: jsonparams, method: \"POST\", headers: {'Content-Type': 'application/json'}})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\tconsole.log(\"Error fetching state bbox\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(response => {\n\t\t\tif (response.meta && response.meta.length) {\n\t\t\t\tlet bbox = multiStateBbox(response.meta);\n\t\t\t\tbbox = checkBbox(bbox);\n\t\t\t\tconsole.log(bbox)\n\t\t\t\treturn bbox;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No bbox for \" + postals);\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\tconsole.log(\"Invalid request\");\n\t\t\t} else {\n\t\t\t\tconsole.log(err.message);\n\t\t\t};\n\t\t})\n};\n*/\n\n\nconst buildParams = input_params => {\n  let paramsToSubmit = {\n    grid: input_params.grid,\n    output: input_params.output\n  }; //console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. \n\n  const mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n  const duration = mndiff + (mndiff >= 0 ? 1 : 13); // Set up nested elements\n\n  const origElem = input_params.elems[0];\n  const newElems = [{\n    elem: origElem,\n    interval: [0, 1],\n    duration: duration,\n    reduce: origElem.reduce\n  }]; // Replicate nested elems for all variables\n\n  if (origElem.name === 'all') {\n    let nestedElem = { ...newElems[0].elem,\n      name: 'maxt',\n      reduce: elements[0].reduce\n    };\n    newElems[0] = { ...newElems[0],\n      elem: nestedElem,\n      reduce: elements[0].reduce\n    };\n    ['mint', 'avgt', 'pcpn'].forEach((elem, i) => {\n      nestedElem = { ...newElems[0].elem,\n        name: elem,\n        reduce: elements[i + 1].reduce\n      };\n      newElems.push({ ...newElems[0],\n        elem: nestedElem,\n        reduce: elements[i + 1].reduce\n      });\n    });\n  } // Add actual elems as modified above to paramenters object\n\n\n  paramsToSubmit.elems = newElems; // send just date instead of sdate and edate.\n\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  paramsToSubmit.date = newDate; // areaDef is type (state, loc, bbox) and value of area of interest.\n\n  if (input_params.areaDef.bbox) {\n    input_params.areaDef.bbox = checkBbox(input_params.areaDef.bbox); //console.log(input_params.areaDef.bbox)\n  } else if (input_params.areaDef.loc) {\n    input_params.areaDef.loc = checkLoc(input_params.areaDef.loc);\n  } else if (input_params.areaDef.state) {//const postals = input_params.areaDef.state;\n    //input_params.areaDef.bbox = fetchBbox(postals);\n    //console.log(input_params.areaDef);\n  } else {\n    console.log(\"unknown areaDef\");\n  } // Add areaDef\n\n\n  paramsToSubmit = { ...paramsToSubmit,\n    ...input_params.areaDef\n  }; // point location can only be json\n\n  if (paramsToSubmit.loc) {\n    paramsToSubmit = { ...paramsToSubmit,\n      output: \"json\"\n    };\n  }\n\n  if (paramsToSubmit.output === 'png') {\n    const image_params = {\n      \"proj\": \"3857\",\n      \"width\": 300,\n      \"levels\": [50, 55, 60, 65, 70],\n      \"overlays\": [\"state:1:black\", \"county:0.5:grey\"]\n    };\n    paramsToSubmit = { ...paramsToSubmit,\n      image: image_params\n    };\n  }\n\n  return paramsToSubmit;\n}; // download a retrieved png image\n\n\nconst downloadFile = (href, filename) => {\n  const link = document.createElement('a');\n  link.href = href;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}; // retrive and download a json file\n\n\nconst downloadFetch = (stringparams, filename, output) => {\n  const jsonparams = JSON.parse(stringparams);\n  const submitParams = JSON.stringify({ ...jsonparams,\n    output: output,\n    meta: \"ll\"\n  });\n  fetch(\"https://grid2.rcc-acis.org/GridData\", {\n    body: submitParams,\n    method: \"POST\"\n  }).then(response => {\n    if (!response.ok) {\n      console.log(\"Error fetching the results\");\n      return;\n    }\n\n    return output === 'json' ? response.json() : response.blob();\n  }).then(response => {\n    var blob;\n\n    if (output === 'json') {\n      const json = JSON.stringify(response);\n      blob = new Blob([json], {\n        type: 'application/json'\n      });\n    } else {\n      blob = response;\n    }\n\n    const href = window.URL.createObjectURL(blob);\n    downloadFile(href, filename);\n  }).catch(err => {\n    if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n      console.log(\"Invalid grid request - \" + jsonparams);\n    } else {\n      console.log(err.message);\n    }\n\n    ;\n  });\n};\n\nexport { buildParams, checkBbox, multiStateBbox, downloadFile, downloadFetch };","map":{"version":3,"sources":["/Users/kle1/progs/React/ncei-normals-mapper/src/utilities/utils.js"],"names":["elements","maxbbox","checkBbox","bbox","west","south","east","north","checkLoc","loc","parseFloat","multiStateBbox","meta","xn","xs","xw","xe","forEach","element","w","s","e","n","newbbox","buildParams","input_params","paramsToSubmit","grid","output","mndiff","parseInt","edate","split","sdate","duration","origElem","elems","newElems","elem","interval","reduce","name","nestedElem","i","push","newDate","length","slice","date","areaDef","state","console","log","image_params","image","downloadFile","href","filename","link","document","createElement","download","body","appendChild","click","removeChild","downloadFetch","stringparams","jsonparams","JSON","parse","submitParams","stringify","fetch","method","then","response","ok","json","blob","Blob","type","window","URL","createObjectURL","catch","err","message","includes"],"mappings":"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","sourcesContent":["import { elements, maxbbox } from '../utilities/constants';\n\n//const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\n// check bounding box \nconst checkBbox = bbox => {\n\tif (bbox[0] < maxbbox.west) {\n\t\tbbox[0] = maxbbox.west;\n\t}\n\tif (bbox[1] < maxbbox.south) {\n\t\tbbox[1] = maxbbox.south;\n\t}\n\tif (bbox[2] > maxbbox.east) {\n\t\tbbox[2] = maxbbox.east;\n\t}\n\tif (bbox[3] > maxbbox.north) {\n\t\tbbox[3] = maxbbox.north;\n\t}\n\treturn bbox;\n};\n\n// check point \nconst checkLoc = loc => {\n\tloc[0] = parseFloat(loc[0]);\n\tloc[1] = parseFloat(loc[1]);\n\tif (loc[0] < maxbbox.west) {\n\t\tloc[0] = maxbbox.west;\n\t}\n\tif (loc[1] < maxbbox.south) {\n\t\tloc[1] = maxbbox.south;\n\t}\n\tif (loc[0] > maxbbox.east) {\n\t\tloc[0] = maxbbox.east;\n\t}\n\tif (loc[1] > maxbbox.north) {\n\t\tloc[1] = maxbbox.north;\n\t}\n\treturn loc;\n};\n\n\n// find bounding box around one or more states\nconst multiStateBbox = meta => {\n\tvar bbox = {xn:0, xs:999, xw:0, xe:-999};\n\tmeta.forEach(element => {\n\t\tconst [w, s, e, n] = [...element.bbox];\n\t\tif (n > bbox.xn) { bbox.xn = n; }\n\t\tif (s < bbox.xs) { bbox.xs = s; }\n\t\tif (w < bbox.xw) { bbox.xw = w; }\n\t\tif (e > bbox.xe) { bbox.xe = e; }\n\t});\n\tconst newbbox = [bbox.xw,bbox.xs,bbox.xe,bbox.xn];\n\treturn checkBbox(newbbox);\n};\n\n/*\nconst fetchBbox = postals => {\n\tconst jsonparams = JSON.stringify({state: postals, meta: \"bbox\"});\n\tfetch(\"https://data.rcc-acis.org/General/state\", {body: jsonparams, method: \"POST\", headers: {'Content-Type': 'application/json'}})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\tconsole.log(\"Error fetching state bbox\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(response => {\n\t\t\tif (response.meta && response.meta.length) {\n\t\t\t\tlet bbox = multiStateBbox(response.meta);\n\t\t\t\tbbox = checkBbox(bbox);\n\t\t\t\tconsole.log(bbox)\n\t\t\t\treturn bbox;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No bbox for \" + postals);\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\tconsole.log(\"Invalid request\");\n\t\t\t} else {\n\t\t\t\tconsole.log(err.message);\n\t\t\t};\n\t\t})\n};\n*/\n\nconst buildParams = (input_params) => {\n\tlet paramsToSubmit = {grid: input_params.grid, output: input_params.output};\n\t//console.log(input_params) // for debugging\n\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. \n\tconst mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n\tconst duration = mndiff + (mndiff >= 0 ? 1 : 13);\n\n\t// Set up nested elements\n\tconst origElem = input_params.elems[0];\n\tconst newElems = [\n\t\t{\n\t\t\telem: origElem, \n\t\t\tinterval: [0,1], \n\t\t\tduration: duration, \n\t\t\treduce: origElem.reduce\n\t\t}\n\t];\n\n\t// Replicate nested elems for all variables\n\tif (origElem.name === 'all') {\n\t\tlet nestedElem = {...newElems[0].elem, name: 'maxt', reduce: elements[0].reduce};\n\t\tnewElems[0] = {...newElems[0], elem:nestedElem, reduce: elements[0].reduce};\n\t\t['mint','avgt','pcpn'].forEach((elem,i) => {\n\t\t\tnestedElem = {...newElems[0].elem, name: elem, reduce: elements[i+1].reduce};\n\t\t\tnewElems.push({...newElems[0], elem: nestedElem, reduce: elements[i+1].reduce});\n\t\t});\n\t}\n\n\t// Add actual elems as modified above to paramenters object\n\tparamsToSubmit.elems = newElems;\n\n\t// send just date instead of sdate and edate.\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tparamsToSubmit.date = newDate;\n\n\t// areaDef is type (state, loc, bbox) and value of area of interest.\n\tif (input_params.areaDef.bbox) {\n\t\tinput_params.areaDef.bbox = checkBbox(input_params.areaDef.bbox);\n\t\t//console.log(input_params.areaDef.bbox)\n\t} else if (input_params.areaDef.loc) {\n\t\tinput_params.areaDef.loc = checkLoc(input_params.areaDef.loc);\n\t} else if (input_params.areaDef.state) {\n\t\t//const postals = input_params.areaDef.state;\n\t\t//input_params.areaDef.bbox = fetchBbox(postals);\n\t\t//console.log(input_params.areaDef);\n\t} else {\n\t\tconsole.log(\"unknown areaDef\");\n\t}\n\n\t// Add areaDef\n\tparamsToSubmit = {...paramsToSubmit, ...input_params.areaDef};\n\t\n\t// point location can only be json\n\tif (paramsToSubmit.loc) {\n\t\tparamsToSubmit = {...paramsToSubmit, output: \"json\"};\n\t}\n\n\tif (paramsToSubmit.output === 'png') {\n\t\tconst image_params = {\"proj\":\"3857\",\"width\":300,\"levels\":[50,55,60,65,70],\"overlays\":[\"state:1:black\",\"county:0.5:grey\"]};\n\t\tparamsToSubmit = {...paramsToSubmit, image: image_params}\n\t}\n\n\treturn paramsToSubmit;\t\n};\n\n// download a retrieved png image\nconst downloadFile = (href, filename) => {\n\tconst link = document.createElement('a');\n\tlink.href = href;\n\tlink.download = filename;\n\tdocument.body.appendChild(link);\n\tlink.click();\n\tdocument.body.removeChild(link);\n};\n\n// retrive and download a json file\nconst downloadFetch = (stringparams, filename, output) => {\n\tconst jsonparams = JSON.parse(stringparams);\n\tconst submitParams = JSON.stringify({...jsonparams, output:output, meta:\"ll\"});\n\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: submitParams, method: \"POST\"})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\tconsole.log(\"Error fetching the results\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn output === 'json' ? response.json() : response.blob();\n\t\t})\n\t\t.then(response => {\n\t\t\tvar blob;\n\t\t\tif (output === 'json') {\n\t\t\t\tconst json = JSON.stringify(response);\n  \t\t\t\tblob = new Blob([json], {type:'application/json'});\n\t\t\t} else {\n\t\t\t\tblob = response;\n\t\t\t}\n\t\t\tconst href = window.URL.createObjectURL(blob);\n\t\t\tdownloadFile(href, filename)\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\tconsole.log(\"Invalid grid request - \"+jsonparams);\n\t\t\t} else {\n\t\t\t\tconsole.log(err.message);\n\t\t\t};\n\t\t});\n};\n\nexport { buildParams, checkBbox, multiStateBbox, downloadFile, downloadFetch };"]},"metadata":{},"sourceType":"module"}