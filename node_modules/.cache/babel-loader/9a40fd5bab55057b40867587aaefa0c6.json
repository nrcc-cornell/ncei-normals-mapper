{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/DateRange.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nconst monthChoices = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nconst dayChoices = Array.from({\n  length: 31\n}, (v, k) => k + 1);\nconst useStyles = makeStyles(theme => ({\n  dateRangeContainer: {\n    border: \"1pt solid midnightblue\",\n    padding: \"0.5em 1em\"\n  },\n  filterLabel: {\n    display: \"inline-block\",\n    lineHeight: \"4.4em\",\n    verticalAlign: \"bottom\",\n    marginRight: \"0.25em\",\n    marginLeft: \"0.25em\"\n  },\n  filterGroup: {\n    display: \"inline-block\",\n    border: \"1px solid rgba(0, 0, 0, 0.23)\",\n    borderRadius: \"4px\",\n    padding: \"0 0.6em\",\n    margin: \"0.6em 0 0.6em 0\"\n  },\n  filterGroupLegend: {\n    fontSize: \"95%\"\n  },\n  textfield: {\n    marginRight: \"0.5em\"\n  }\n}));\n\nconst DateRange = () => {\n  _s();\n\n  const [fromFilterMonth, setFromFilterMonth] = useState('01');\n  const [fromFilterDay, setFromFilterDay] = useState('01');\n  const [toFilterMonth, setToFilterMonth] = useState('12');\n  const [toFilterDay, setToFilterDay] = useState('31');\n  const inputContext = useContext(InputParamsContext);\n  const classes = useStyles();\n\n  const handleChangeMonth = name => event => {\n    if (name === 'fromFilterMonth') {\n      setFromFilterMonth(event.target.value);\n    } else if (name === 'toFilterMonth') {\n      setToFilterMonth(event.target.value);\n    }\n  };\n\n  const handleChangeDay = name => event => {\n    if (name === 'fromFilterDay') {\n      setFromFilterDay(event.target.value);\n    } else if (name === 'toFilterDay') {\n      setToFilterDay(event.target.value);\n    }\n  };\n\n  const serialStringSelectOptions = choices => {\n    console.log(fromFilterMonth);\n    return choices.map((option, i) => {\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        disabled: option === '31' && {\n          fromFilterMonth\n        } === '11',\n        value: (\"0\" + (i + 1)).slice(-2),\n        children: option\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 6\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.dateRangeContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: classes.filterGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        className: classes.filterGroupLegend,\n        children: \"Start date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        id: \"fromFilterMonth\",\n        value: fromFilterMonth,\n        onChange: handleChangeMonth('fromFilterMonth'),\n        className: classes.textfield,\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialStringSelectOptions(monthChoices)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        id: \"fromFilterDay\",\n        value: fromFilterDay,\n        onChange: handleChangeDay('fromFilterDay'),\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialStringSelectOptions(dayChoices)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      className: classes.filterLabel,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: classes.filterGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        className: classes.filterGroupLegend,\n        children: \"End date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        id: \"toFilterMonth\",\n        value: toFilterMonth,\n        onChange: handleChangeMonth('toFilterMonth'),\n        className: classes.textfield,\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialStringSelectOptions(monthChoices)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        id: \"toFilterDay\",\n        value: toFilterDay,\n        onChange: handleChangeDay('toFilterDay'),\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialStringSelectOptions(dayChoices)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 3\n  }, this);\n};\n\n_s(DateRange, \"EyWXjfshUPK5kPjUhX+SO7GsRoU=\", false, function () {\n  return [useStyles];\n});\n\n_c = DateRange;\nexport default DateRange;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateRange\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/DateRange.js"],"names":["React","useState","useContext","TextField","Typography","MenuItem","makeStyles","InputParamsContext","monthChoices","dayChoices","Array","from","length","v","k","useStyles","theme","dateRangeContainer","border","padding","filterLabel","display","lineHeight","verticalAlign","marginRight","marginLeft","filterGroup","borderRadius","margin","filterGroupLegend","fontSize","textfield","DateRange","fromFilterMonth","setFromFilterMonth","fromFilterDay","setFromFilterDay","toFilterMonth","setToFilterMonth","toFilterDay","setToFilterDay","inputContext","classes","handleChangeMonth","name","event","target","value","handleChangeDay","serialStringSelectOptions","choices","console","log","map","option","i","slice","native"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\n\n\nconst monthChoices = ['January','February','March','April','May','June','July','August','September','October','November','December'];\nconst dayChoices = Array.from({length: 31}, (v, k) => k+1);\n\nconst useStyles = makeStyles((theme) => ({\n\tdateRangeContainer: {\n\t\tborder: \"1pt solid midnightblue\",\n\t\tpadding: \"0.5em 1em\",\n\t},\n\tfilterLabel: {\n\t\tdisplay: \"inline-block\",\n\t\tlineHeight: \"4.4em\",\n\t\tverticalAlign: \"bottom\",\n\t\tmarginRight: \"0.25em\",\n\t\tmarginLeft: \"0.25em\",\n\t},\n\tfilterGroup: {\n\t\tdisplay: \"inline-block\",\n\t\tborder: \"1px solid rgba(0, 0, 0, 0.23)\",\n\t\tborderRadius: \"4px\",\n\t\tpadding: \"0 0.6em\",\n\t\tmargin: \"0.6em 0 0.6em 0\",\n\t},\n\tfilterGroupLegend: {\n\t\tfontSize: \"95%\",\n\t},\n\ttextfield: {\n    marginRight: \"0.5em\",\n  },\n}));\n\nconst DateRange = () => {\n\tconst [fromFilterMonth, setFromFilterMonth] = useState('01');\n\tconst [fromFilterDay, setFromFilterDay] = useState('01');\n\tconst [toFilterMonth, setToFilterMonth] = useState('12');\n\tconst [toFilterDay, setToFilterDay] = useState('31');\n\tconst inputContext = useContext(InputParamsContext);\n\tconst classes = useStyles();\n\n\tconst handleChangeMonth = (name) => event => {\n\t\tif (name === 'fromFilterMonth') {\n\t\t\tsetFromFilterMonth(event.target.value)\n\t\t} else if (name === 'toFilterMonth') {\n\t\t\tsetToFilterMonth(event.target.value)\n\t\t}\n\t};\n\n\tconst handleChangeDay = (name) => event => {\n\t\tif (name === 'fromFilterDay') {\n\t\t\tsetFromFilterDay(event.target.value)\n\t\t} else if (name === 'toFilterDay') {\n\t\t\tsetToFilterDay(event.target.value)\n\t\t}\n\t};\n\n\tconst serialStringSelectOptions = (choices) => {\n\t\tconsole.log(fromFilterMonth)\n    return (\n      choices.map((option,i) => {\n        return (\n\t\t\t\t\t<MenuItem \n\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\tdisabled={option === '31' && {fromFilterMonth} === '11'}\n\t\t\t\t\t\tvalue={(\"0\" + (i+1)).slice(-2)}\n\t\t\t\t\t>\n            {option}\n          </MenuItem>\n        )\n      })\n    )\n  };\n\n\treturn (\n\t\t<div className={classes.dateRangeContainer}>\n\t\t\t<fieldset className={classes.filterGroup}>\n\t\t\t\t<legend className={classes.filterGroupLegend}>Start date</legend>\n\t\t\t\t<TextField\n\t\t\t\t\tselect\n\t\t\t\t\tid=\"fromFilterMonth\"\n\t\t\t\t\tvalue={fromFilterMonth}\n\t\t\t\t\tonChange={handleChangeMonth('fromFilterMonth')}\n\t\t\t\t\tclassName={classes.textfield}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t>\n\t\t\t\t\t{serialStringSelectOptions(monthChoices)}\n\t\t\t\t</TextField>\n\t\t\t\t<TextField\n\t\t\t\t\tselect\n\t\t\t\t\tid=\"fromFilterDay\"\n\t\t\t\t\tvalue={fromFilterDay}\n\t\t\t\t\tonChange={handleChangeDay('fromFilterDay')}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{serialStringSelectOptions(dayChoices)}\n\t\t\t\t</TextField>\n\t\t\t</fieldset>\n\t\t\t<Typography className={classes.filterLabel}>\n\t\t\t\t -\n\t\t\t</Typography>\n\t\t\t<fieldset className={classes.filterGroup}>\n\t\t\t\t<legend className={classes.filterGroupLegend}>End date</legend>\n\t\t\t\t<TextField\n\t\t\t\t\tselect\n\t\t\t\t\tid=\"toFilterMonth\"\n\t\t\t\t\tvalue={toFilterMonth}\n\t\t\t\t\tonChange={handleChangeMonth('toFilterMonth')}\n\t\t\t\t\tclassName={classes.textfield}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{serialStringSelectOptions(monthChoices)}\n\t\t\t\t</TextField>\n\t\t\t\t<TextField\n\t\t\t\t\tselect\n\t\t\t\t\tid=\"toFilterDay\"\n\t\t\t\t\tvalue={toFilterDay}\n\t\t\t\t\tonChange={handleChangeDay('toFilterDay')}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{serialStringSelectOptions(dayChoices)}\n\t\t\t\t</TextField>\n\t\t\t</fieldset>\n\t\t</div>\n\t)\n}\n\nexport default DateRange;"]},"metadata":{},"sourceType":"module"}