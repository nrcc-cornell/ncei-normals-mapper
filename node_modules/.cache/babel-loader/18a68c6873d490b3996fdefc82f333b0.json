{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/ncei-normals-mapper/src/components/GetResults.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport InputParamsContext from './InputParamsContext';\nimport { buildParams } from '../utilities/utils';\nimport DisplayMap from \"./DisplayMap\";\nimport DisplayJson from \"./DisplayJson\";\n\nconst GetResults = () => {\n  _s();\n\n  const [mapBlob, setMapBlob] = useState();\n  const [jsonresp, setJsonresp] = useState();\n  const [imgInfo, setImgInfo] = useState();\n  const [resultsError, setResultsError] = useState();\n  const [loading, setLoading] = useState(false);\n  const [submittedParams, setSubmittedParams] = useState();\n  const inputContext = useContext(InputParamsContext);\n\n  const fetchResponse = (params, output) => {\n    const infoInput = JSON.stringify({ ...params,\n      output: \"json\"\n    });\n    fetch(\"https://grid2.rcc-acis.org/GridData\", {\n      body: infoInput,\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (!response.ok) {\n        const message = \"Error on request\" + (response.statusText ? \": \" + response.statusText : \"\");\n        setResultsError(message);\n        return;\n      }\n\n      return response.json();\n    }).then(response => {\n      console.log(response);\n\n      if (output === 'png') {\n        setMapBlob(response.data);\n        setImgInfo(response);\n      } else {\n        setJsonresp(response.data);\n      }\n    }).catch(err => {\n      if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n        setResultsError(\"Invalid grid request - \" + infoInput);\n      } else {\n        setResultsError(\"Error: \" + err.message);\n      }\n\n      ;\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    setLoading(true); // Build parameters\n\n    const input = buildParams(inputContext.inputParams); // Save parameters \n\n    setSubmittedParams(input); // Get results\n\n    fetchResponse(input, input.output); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputContext.inputParams]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), submittedParams && (jsonresp || mapBlob) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [mapBlob && /*#__PURE__*/_jsxDEV(DisplayMap, {\n        imgsrc: mapBlob,\n        imgInfo: imgInfo,\n        submittedParams: submittedParams\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), jsonresp && /*#__PURE__*/_jsxDEV(DisplayJson, {\n        jsonresp: jsonresp,\n        submittedParams: submittedParams\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true), resultsError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: resultsError\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GetResults, \"PrDrsvMWrwAUPEJhi1lWXaD+z3Y=\");\n\n_c = GetResults;\nexport default GetResults;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetResults\");","map":{"version":3,"sources":["/Users/kle1/progs/React/ncei-normals-mapper/src/components/GetResults.js"],"names":["React","useEffect","useState","useContext","CircularProgress","InputParamsContext","buildParams","DisplayMap","DisplayJson","GetResults","mapBlob","setMapBlob","jsonresp","setJsonresp","imgInfo","setImgInfo","resultsError","setResultsError","loading","setLoading","submittedParams","setSubmittedParams","inputContext","fetchResponse","params","output","infoInput","JSON","stringify","fetch","body","method","headers","then","response","ok","message","statusText","json","console","log","data","catch","err","includes","finally","input","inputParams"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext} from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport InputParamsContext from './InputParamsContext';\nimport { buildParams } from '../utilities/utils';\nimport DisplayMap from \"./DisplayMap\";\nimport DisplayJson from \"./DisplayJson\";\n\nconst GetResults = () => {\n\tconst [mapBlob, setMapBlob] = useState();\n\tconst [jsonresp, setJsonresp] = useState();\n\tconst [imgInfo, setImgInfo] = useState();\n\tconst [resultsError, setResultsError] = useState();\n\tconst [loading, setLoading] = useState(false);\n\tconst [submittedParams, setSubmittedParams] = useState();\n\tconst inputContext = useContext(InputParamsContext);\n\n\tconst fetchResponse = (params, output) => {\n\t\tconst infoInput = JSON.stringify({...params, output: \"json\"});\n\t\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: infoInput, method: \"POST\", headers: {'Content-Type': 'application/json'},})\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst message = \"Error on request\" + (response.statusText ? (\": \" + response.statusText) : \"\");\n\t\t\t\t\tsetResultsError(message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response)\n\t\t\t\tif (output === 'png') {\n\t\t\t\t\tsetMapBlob(response.data)\n\t\t\t\t\tsetImgInfo(response);\n\t\t\t\t} else {\n\t\t\t\t\tsetJsonresp(response.data);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\t\tsetResultsError(\"Invalid grid request - \"+infoInput);\n\t\t\t\t} else {\n\t\t\t\t\tsetResultsError(\"Error: \" + err.message);\n\t\t\t\t};\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\tsetLoading(true);\n\t\t// Build parameters\n\t\tconst input = buildParams(inputContext.inputParams);\n\t\t// Save parameters \n\t\tsetSubmittedParams(input);\n\t\t// Get results\n\t\tfetchResponse(input, input.output)\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [inputContext.inputParams]);\n\n\treturn (\n\t\t<>\n\t\t\t{loading &&\n\t\t\t\t<CircularProgress />\n\t\t\t}\n\t\t\t{submittedParams && (jsonresp || mapBlob) &&\n\t\t\t\t<>\n\t\t\t\t\t{mapBlob &&\n\t\t\t\t\t\t<DisplayMap \n\t\t\t\t\t\t\timgsrc={mapBlob}\n\t\t\t\t\t\t\timgInfo={imgInfo}\n\t\t\t\t\t\t\tsubmittedParams={submittedParams}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\t{jsonresp &&\n\t\t\t\t\t\t<DisplayJson\n\t\t\t\t\t\t\tjsonresp={jsonresp}\n\t\t\t\t\t\t\tsubmittedParams={submittedParams}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t</>\n\t\t\t}\n\t\t\t{resultsError &&\n\t\t\t\t<p>{resultsError}</p>\n\t\t\t}\n\t\t</>\n\t);\n}\n\nexport default GetResults;"]},"metadata":{},"sourceType":"module"}