{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/RenderDate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nimport { months } from '../utilities/constants';\nconst useStyles = makeStyles(theme => ({\n  dateGroup: {\n    display: \"inline-block\",\n    border: \"1px solid rgba(0, 0, 0, 0.23)\",\n    borderRadius: \"4px\",\n    padding: \"0 0.6em\",\n    margin: \"0.6em 0 0.6em 0\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\"\n  },\n  dateGroupLegend: {\n    fontSize: \"95%\"\n  },\n  textfield: {\n    marginRight: \"0.5em\"\n  },\n  menuitem: {\n    paddingTop: \"1px\",\n    paddingBottom: \"1px\"\n  }\n}));\n\nconst RenderDate = props => {\n  _s();\n\n  const {\n    dateLegend,\n    dateParam,\n    justMonth = false\n  } = props;\n  const inputContext = useContext(InputParamsContext);\n  const [, initMonth, initDay] = inputContext.inputParams[dateParam].split(\"-\");\n  const [selectMonth, setSelectMonth] = useState(initMonth);\n  const [selectDay, setSelectDay] = useState(initDay);\n  const classes = useStyles();\n  const dayMonths30 = ['04', '06', '09', '11'];\n\n  const updateDate = (newMonth, newDay) => {\n    const newdate = [\"2019\", newMonth, newDay].join(\"-\");\n    inputContext.updateInputParams({\n      [dateParam]: newdate\n    });\n  };\n\n  const handleChangeMonth = () => event => {\n    const newMonth = event.target.value;\n    setSelectMonth(newMonth);\n\n    if (selectDay === '31' && dayMonths30.includes(newMonth)) {\n      setSelectDay('30');\n      updateDate(newMonth, '30');\n    } else if (selectDay >= '29' && event.target.value === '02') {\n      setSelectDay('28');\n      updateDate(newMonth, '28');\n    } else {\n      updateDate(newMonth, selectDay);\n    }\n\n    ;\n  };\n\n  const handleChangeDay = () => event => {\n    const newDay = event.target.value;\n    setSelectDay(newDay);\n    updateDate(selectMonth, newDay);\n  };\n\n  const serialMonthOptions = () => {\n    return months.map((option, i) => {\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        className: classes.menuitem,\n        value: (\"0\" + (i + 1)).slice(-2),\n        children: option\n      }, \"m\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }, this);\n    });\n  };\n\n  const serialDayOptions = () => {\n    let arrlen = 31;\n\n    if (dayMonths30.includes(selectMonth)) {\n      arrlen = 30;\n    } else if (selectMonth === '02') {\n      arrlen = 28;\n    }\n\n    return Array.from({\n      length: arrlen\n    }, (v, k) => k + 1).map((option, i) => {\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        className: classes.menuitem,\n        value: (\"0\" + (i + 1)).slice(-2),\n        children: option\n      }, \"d\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: classes.dateGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        className: classes.dateGroupLegend,\n        children: dateLegend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        value: selectMonth,\n        id: \"selectMonth\",\n        onChange: handleChangeMonth(),\n        className: classes.textfield,\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialMonthOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 5\n      }, this), !justMonth && /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        value: selectDay,\n        id: \"selectDay\",\n        onChange: handleChangeDay(),\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialDayOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(RenderDate, \"TRuOfKHdbYmlhwVUPaetfwezOhU=\", false, function () {\n  return [useStyles];\n});\n\n_c = RenderDate;\nexport default RenderDate;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderDate\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/RenderDate.js"],"names":["React","useState","useContext","TextField","MenuItem","makeStyles","InputParamsContext","months","useStyles","theme","dateGroup","display","border","borderRadius","padding","margin","fontFamily","dateGroupLegend","fontSize","textfield","marginRight","menuitem","paddingTop","paddingBottom","RenderDate","props","dateLegend","dateParam","justMonth","inputContext","initMonth","initDay","inputParams","split","selectMonth","setSelectMonth","selectDay","setSelectDay","classes","dayMonths30","updateDate","newMonth","newDay","newdate","join","updateInputParams","handleChangeMonth","event","target","value","includes","handleChangeDay","serialMonthOptions","map","option","i","slice","serialDayOptions","arrlen","Array","from","length","v","k","native"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nimport { months } from '../utilities/constants';\n\nconst useStyles = makeStyles((theme) => ({\n\tdateGroup: {\n\t\tdisplay: \"inline-block\",\n\t\tborder: \"1px solid rgba(0, 0, 0, 0.23)\",\n\t\tborderRadius: \"4px\",\n\t\tpadding: \"0 0.6em\",\n\t\tmargin: \"0.6em 0 0.6em 0\",\n\t\tfontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n\t},\n\tdateGroupLegend: {\n\t\tfontSize: \"95%\",\n\t},\n\ttextfield: {\n\t\tmarginRight: \"0.5em\",\n\t},\n\tmenuitem: {\n\t\tpaddingTop: \"1px\",\n\t\tpaddingBottom: \"1px\",\n\t},\n}));\n\nconst RenderDate = (props) => {\n\tconst { dateLegend, dateParam, justMonth=false } = props;\n\tconst inputContext = useContext(InputParamsContext);\n\tconst [, initMonth, initDay] = inputContext.inputParams[dateParam].split(\"-\");\n\tconst [selectMonth, setSelectMonth] = useState(initMonth);\n\tconst [selectDay, setSelectDay] = useState(initDay);\n\tconst classes = useStyles();\n\tconst dayMonths30 = ['04','06','09','11'];\n\n\tconst updateDate = (newMonth, newDay) => {\n\t\tconst newdate = [\"2019\", newMonth, newDay].join(\"-\");\n\t\tinputContext.updateInputParams({[dateParam]:newdate});\t\n\t};\n\t\n\tconst handleChangeMonth = () => event => {\n\t\tconst newMonth = event.target.value;\n\t\tsetSelectMonth(newMonth);\n\t\tif (selectDay === '31' && dayMonths30.includes(newMonth)) {\n\t\t\tsetSelectDay('30');\n\t\t\tupdateDate(newMonth, '30');\n\t\t} else if (selectDay >= '29' && event.target.value === '02') {\n\t\t\tsetSelectDay('28');\n\t\t\tupdateDate(newMonth, '28');\n\t\t} else {\n\t\t\tupdateDate(newMonth, selectDay);\n\t\t};\n\t};\n\n\tconst handleChangeDay = () => event => {\n\t\tconst newDay = event.target.value;\n\t\tsetSelectDay(newDay);\n\t\tupdateDate(selectMonth, newDay);\n\t};\n\n\tconst serialMonthOptions = () => {\n\t\treturn (\n\t\t\tmonths.map((option,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<MenuItem \n\t\t\t\t\t\tkey={\"m\"+i} \n\t\t\t\t\t\tclassName={classes.menuitem}\n\t\t\t\t\t\tvalue={(\"0\" + (i+1)).slice(-2)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t)\n\t\t\t})\n\t\t);\n\t};\t\n\t\n\tconst serialDayOptions = () => {\n\t\tlet arrlen = 31;\n\t\tif (dayMonths30.includes(selectMonth)) {\n\t\t\tarrlen = 30;\n\t\t} else if (selectMonth === '02') {\n\t\t\tarrlen = 28;\n\t\t}\n\t\treturn (\n\t\t\tArray.from({length: arrlen}, (v, k) => k+1).map((option,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<MenuItem \n\t\t\t\t\t\tkey={\"d\"+i} \n\t\t\t\t\t\tclassName={classes.menuitem}\n\t\t\t\t\t\tvalue={(\"0\" + (i+1)).slice(-2)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t)\n\t\t\t})\n\t\t);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<fieldset className={classes.dateGroup}>\n\t\t\t\t<legend className={classes.dateGroupLegend}>{dateLegend}</legend>\n\t\t\t\t<TextField\n\t\t\t\t\tselect\n\t\t\t\t\tvalue={selectMonth}\n\t\t\t\t\tid=\"selectMonth\"\n\t\t\t\t\tonChange={handleChangeMonth()}\n\t\t\t\t\tclassName={classes.textfield}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t>\n\t\t\t\t\t{serialMonthOptions()}\n\t\t\t\t</TextField>\n\t\t\t\t{!justMonth &&\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tselect\n\t\t\t\t\t\tvalue={selectDay}\n\t\t\t\t\t\tid=\"selectDay\"\n\t\t\t\t\t\tonChange={handleChangeDay()}\n\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{serialDayOptions()}\n\t\t\t\t\t</TextField>\n\t\t\t\t}\n\t\t\t</fieldset>\n\t\t</>\n\t)\n}\n\nexport default RenderDate;"]},"metadata":{},"sourceType":"module"}