{"ast":null,"code":"import { elements } from '../utilities/constants'; //const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\nconst buildParams = input_params => {\n  let paramsToSubmit = {\n    grid: input_params.grid,\n    output: input_params.output\n  }; //console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\n  const mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n  const duration = mndiff + (mndiff >= 0 ? 1 : 13);\n  input_params.elems[0].duration = duration;\n  const newElems = [...input_params.elems];\n  newElems[0] = { ...newElems[0],\n    duration\n  };\n\n  if (newElems[0].name === 'all') {\n    newElems[0] = { ...newElems[0],\n      name: 'maxt',\n      reduce: elements[0].reduce\n    };\n    ['mint', 'avgt', 'pcpn'].forEach((elem, i) => {\n      newElems.push({ ...newElems[0],\n        name: elem,\n        reduce: elements[i + 1].reduce\n      });\n    });\n  }\n\n  paramsToSubmit.elems = newElems;\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  paramsToSubmit.date = newDate; // areaDef is type (e.g. state, loc, county) and value of area of interest.\n\n  paramsToSubmit = { ...paramsToSubmit,\n    ...input_params.areaDef\n  }; // point location can only be json\n\n  if (paramsToSubmit.loc) {\n    paramsToSubmit = { ...paramsToSubmit,\n      output: \"json\"\n    };\n  }\n\n  return paramsToSubmit;\n}; // find bounding box around one or more states\n\n\nconst multiStateBbox = meta => {\n  var bbox = {\n    xn: 0,\n    xs: 999,\n    xw: 0,\n    xe: -999\n  };\n  meta.forEach(element => {\n    const [w, s, e, n] = [...element.bbox];\n\n    if (n > bbox.xn) {\n      bbox.xn = n;\n    }\n\n    if (s < bbox.xs) {\n      bbox.xs = s;\n    }\n\n    if (w < bbox.xw) {\n      bbox.xw = w;\n    }\n\n    if (e > bbox.xe) {\n      bbox.xe = e;\n    }\n  });\n  return [bbox.xw, bbox.xs, bbox.xe, bbox.xn];\n}; // download a retrieved gif image\n\n\nconst downloadImage = (blob, filename) => {\n  const link = document.createElement('a');\n  link.href = blob;\n  link.setAttribute('download', filename);\n  document.body.appendChild(link);\n  link.click();\n}; // retrive and download a json file\n\n\nconst downloadFetch = stringparams => {\n  const jsonparams = JSON.parse(stringparams);\n  const submitParams = JSON.stringify({ ...jsonparams,\n    output: \"json\"\n  });\n  console.log(submitParams);\n  fetch(\"https://grid2.rcc-acis.org/GridData\", {\n    body: submitParams,\n    method: \"POST\"\n  }).then(response => {\n    if (!response.ok) {\n      console.log(\"Error fetching the results\");\n      return;\n    }\n\n    return response.json();\n  }).then(response => {\n    const href = window.URL.createObjectURL(JSON.stringify(response));\n    const link = document.createElement('a');\n    link.href = href;\n    link.setAttribute('download', 'normalsData.json');\n    document.body.appendChild(link);\n    link.click();\n  }).catch(err => {\n    if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n      console.log(\"Invalid grid request - \" + jsonparams);\n    } else {\n      console.log(err.message);\n    }\n\n    ;\n  });\n};\n\nexport { buildParams, multiStateBbox, downloadImage, downloadFetch };","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["elements","buildParams","input_params","paramsToSubmit","grid","output","mndiff","parseInt","edate","split","sdate","duration","elems","newElems","name","reduce","forEach","elem","i","push","newDate","interval","length","slice","date","areaDef","loc","multiStateBbox","meta","bbox","xn","xs","xw","xe","element","w","s","e","n","downloadImage","blob","filename","link","document","createElement","href","setAttribute","body","appendChild","click","downloadFetch","stringparams","jsonparams","JSON","parse","submitParams","stringify","console","log","fetch","method","then","response","ok","json","window","URL","createObjectURL","catch","err","message","includes"],"mappings":"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","sourcesContent":["import { elements } from '../utilities/constants';\n\n//const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\t\nconst buildParams = (input_params) => {\n\tlet paramsToSubmit = {grid: input_params.grid, output: input_params.output};\n\t//console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\tconst mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n\tconst duration = mndiff + (mndiff >= 0 ? 1 : 13);\n\tinput_params.elems[0].duration = duration;\n\t\n\tconst newElems = [...input_params.elems];\n\tnewElems[0] = {...newElems[0], duration};\n\n\tif (newElems[0].name === 'all') {\n\t\tnewElems[0] = {...newElems[0], name: 'maxt', reduce: elements[0].reduce};\n\t\t['mint','avgt','pcpn'].forEach((elem,i) => {\n\t\t\tnewElems.push({...newElems[0], name:elem, reduce: elements[i+1].reduce});\n\t\t});\n\t}\n\tparamsToSubmit.elems = newElems;\n\t\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tparamsToSubmit.date = newDate;\n\n\t// areaDef is type (e.g. state, loc, county) and value of area of interest.\n\tparamsToSubmit = {...paramsToSubmit, ...input_params.areaDef};\n\t\n\t// point location can only be json\n\tif (paramsToSubmit.loc) {\n\t\tparamsToSubmit = {...paramsToSubmit, output: \"json\"};\n\t}\n\n\treturn paramsToSubmit;\t\n};\n\n// find bounding box around one or more states\nconst multiStateBbox = meta => {\n\tvar bbox = {xn:0, xs:999, xw:0, xe:-999};\n\tmeta.forEach(element => {\n\t\tconst [w, s, e, n] = [...element.bbox];\n\t\tif (n > bbox.xn) { bbox.xn = n; }\n\t\tif (s < bbox.xs) { bbox.xs = s; }\n\t\tif (w < bbox.xw) { bbox.xw = w; }\n\t\tif (e > bbox.xe) { bbox.xe = e; }\n\t});\n\treturn [bbox.xw,bbox.xs,bbox.xe,bbox.xn];\n};\n// download a retrieved gif image\nconst downloadImage = (blob, filename) => {\n\tconst link = document.createElement('a');\n\tlink.href = blob;\n\tlink.setAttribute('download', filename);\n\tdocument.body.appendChild(link);\n\tlink.click();\n};\n\n// retrive and download a json file\nconst downloadFetch = (stringparams) => {\n\tconst jsonparams = JSON.parse(stringparams);\n\tconst submitParams = JSON.stringify({...jsonparams, output:\"json\"});\n\tconsole.log(submitParams);\n\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: submitParams, method: \"POST\"})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\tconsole.log(\"Error fetching the results\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(response => {\n\t\t\tconst href = window.URL.createObjectURL(JSON.stringify(response))\n\t\t\tconst link = document.createElement('a');\n\t\t\tlink.href = href;\n\t\t\tlink.setAttribute('download', 'normalsData.json');\n\t\t\tdocument.body.appendChild(link);\n\t\t\tlink.click();\n\t\t\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\tconsole.log(\"Invalid grid request - \"+jsonparams);\n\t\t\t} else {\n\t\t\t\tconsole.log(err.message);\n\t\t\t};\n\t\t});\n};\n\nexport { buildParams, multiStateBbox, downloadImage, downloadFetch };"]},"metadata":{},"sourceType":"module"}