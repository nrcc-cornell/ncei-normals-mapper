{"ast":null,"code":"import { elements } from '../utilities/constants'; //const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\nconst buildParams = input_params => {\n  let paramsToSubmit = {\n    grid: input_params.grid,\n    output: input_params.output\n  }; //console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\n  const mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n  const duration = mndiff + (mndiff >= 0 ? 1 : 13);\n  input_params.elems[0].duration = duration;\n  const newElems = [...input_params.elems];\n  newElems[0] = { ...newElems[0],\n    duration\n  };\n\n  if (newElems[0].name === 'all') {\n    newElems[0] = { ...newElems[0],\n      name: 'maxt',\n      reduce: elements[0].reduce\n    };\n    ['mint', 'avgt', 'pcpn'].forEach((elem, i) => {\n      newElems.push({ ...newElems[0],\n        name: elem,\n        reduce: elements[i + 1].reduce\n      });\n    });\n  }\n\n  paramsToSubmit.elems = newElems;\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  paramsToSubmit.date = newDate; // areaDef is type (e.g. state, loc, county) and value of area of interest.\n\n  paramsToSubmit = { ...paramsToSubmit,\n    ...input_params.areaDef\n  }; // point location can only be json\n\n  if (paramsToSubmit.loc) {\n    paramsToSubmit = { ...paramsToSubmit,\n      output: \"json\"\n    };\n  }\n\n  return paramsToSubmit;\n};\n\nconst fetchBbox = postals => {\n  const jsonparams = JSON.stringify({\n    state: postals,\n    meta: \"bbox\"\n  });\n  fetch(\"https://data.rcc-acis.org/General/state\", {\n    body: jsonparams,\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      return \"Error\";\n    }\n\n    return response.json();\n  }).then(response => {\n    if (response.meta && response.meta.length) {\n      console.log('got meta' + \" \" + response.meta);\n      return response.meta;\n    } else {\n      return \"No list for \" + postals;\n    }\n  }).catch(err => {\n    if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n      return \"Invalid request\";\n    } else {\n      return err.message;\n    }\n\n    ;\n  });\n};\n\nexport { buildParams, fetchBbox };","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["elements","buildParams","input_params","paramsToSubmit","grid","output","mndiff","parseInt","edate","split","sdate","duration","elems","newElems","name","reduce","forEach","elem","i","push","newDate","interval","length","slice","date","areaDef","loc","fetchBbox","postals","jsonparams","JSON","stringify","state","meta","fetch","body","method","headers","then","response","ok","json","console","log","catch","err","message","includes"],"mappings":"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","sourcesContent":["import { elements } from '../utilities/constants';\n\n//const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\t\nconst buildParams = (input_params) => {\n\tlet paramsToSubmit = {grid: input_params.grid, output: input_params.output};\n\t//console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\tconst mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n\tconst duration = mndiff + (mndiff >= 0 ? 1 : 13);\n\tinput_params.elems[0].duration = duration;\n\t\n\tconst newElems = [...input_params.elems];\n\tnewElems[0] = {...newElems[0], duration};\n\n\tif (newElems[0].name === 'all') {\n\t\tnewElems[0] = {...newElems[0], name: 'maxt', reduce: elements[0].reduce};\n\t\t['mint','avgt','pcpn'].forEach((elem,i) => {\n\t\t\tnewElems.push({...newElems[0], name:elem, reduce: elements[i+1].reduce});\n\t\t});\n\t}\n\tparamsToSubmit.elems = newElems;\n\t\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tparamsToSubmit.date = newDate;\n\n\t// areaDef is type (e.g. state, loc, county) and value of area of interest.\n\tparamsToSubmit = {...paramsToSubmit, ...input_params.areaDef};\n\t\n\t// point location can only be json\n\tif (paramsToSubmit.loc) {\n\t\tparamsToSubmit = {...paramsToSubmit, output: \"json\"};\n\t}\n\n\treturn paramsToSubmit;\t\n};\nconst fetchBbox = (postals) => {\n\tconst jsonparams = JSON.stringify({state: postals, meta: \"bbox\"});\n\tfetch(\"https://data.rcc-acis.org/General/state\", {body: jsonparams, method: \"POST\", headers: {'Content-Type': 'application/json'}})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\treturn \"Error\";\n\t\t\t}\n\t\t\treturn response.json()\n\t\t})\n\t\t.then(response => {\n\t\t\tif (response.meta && response.meta.length) {\n\t\t\t\tconsole.log('got meta' + \" \" + response.meta)\n\t\t\t\treturn response.meta;\n\t\t\t} else {\n\t\t\t\t return \"No list for \"+postals;\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\treturn \"Invalid request\";\n\t\t\t} else {\n\t\t\t\treturn err.message;\n\t\t\t};\n\t\t})\n};\n\nexport { buildParams, fetchBbox };"]},"metadata":{},"sourceType":"module"}