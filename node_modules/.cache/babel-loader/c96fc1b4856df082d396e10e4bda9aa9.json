{"ast":null,"code":"import { elements } from '../utilities/constants';\n\nconst dateDiff = (date1, date2) => {\n  const sdate = date1 instanceof Date ? date1 : new Date(date1);\n  const edate = date2 instanceof Date ? date2 : new Date(date2);\n  const one_day = 1000 * 60 * 60 * 24;\n  return Math.round((edate.getTime() - sdate.getTime()) / one_day);\n};\n\nconst buildParams = input_params => {\n  let paramsToSubmit = {\n    grid: input_params.grid,\n    output: input_params.output\n  }; //console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\n  var duration;\n\n  if (input_params.elems[0].duration === 1) {\n    duration = 1;\n  } else if (input_params.sdate <= input_params.edate) {\n    duration = dateDiff(input_params.sdate, input_params.edate) + 1;\n  } else {\n    // dates wrap around year border\n    const newStart = new Date(input_params.sdate);\n    newStart.setFullYear(2018);\n    duration = dateDiff(newStart, input_params.edate) + 1;\n  }\n\n  const newElems = [...input_params.elems];\n  newElems[0] = { ...newElems[0],\n    duration\n  };\n\n  if (newElems[0].name === 'all') {\n    newElems[0] = { ...newElems[0],\n      name: 'maxt',\n      reduce: elements[0].reduce\n    };\n    ['mint', 'avgt', 'pcpn'].forEach((elem, i) => {\n      newElems.push({ ...newElems[0],\n        name: elem,\n        reduce: elements[i + 1].reduce\n      });\n    });\n  }\n\n  paramsToSubmit.elems = newElems;\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  paramsToSubmit.date = newDate; // areaDef is used to determine whether to send \"state\", \"county\" or \"bbox\" or \"loc\".\n\n  paramsToSubmit = { ...paramsToSubmit,\n    ...input_params.areaDef\n  }; // point location can only be json\n\n  if (paramsToSubmit.loc) {\n    paramsToSubmit = { ...paramsToSubmit,\n      output: \"json\"\n    };\n  }\n\n  return paramsToSubmit;\n};\n\nexport { buildParams };","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["elements","dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","buildParams","input_params","paramsToSubmit","grid","output","duration","elems","newStart","setFullYear","newElems","name","reduce","forEach","elem","i","push","newDate","interval","length","slice","date","areaDef","loc"],"mappings":"AAAA,SAASA,QAAT,QAAyB,wBAAzB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,QAAMC,KAAK,GAAGF,KAAK,YAAYG,IAAjB,GAAwBH,KAAxB,GAAgC,IAAIG,IAAJ,CAASH,KAAT,CAA9C;AACA,QAAMI,KAAK,GAAGH,KAAK,YAAYE,IAAjB,GAAwBF,KAAxB,GAAgC,IAAIE,IAAJ,CAASF,KAAT,CAA9C;AACA,QAAMI,OAAO,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjC;AACA,SAAQC,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,CAACI,OAAN,KAAkBN,KAAK,CAACM,OAAN,EAAnB,IAAsCH,OAAjD,CAAR;AACA,CALD;;AAOA,MAAMI,WAAW,GAAIC,YAAD,IAAkB;AACrC,MAAIC,cAAc,GAAG;AAACC,IAAAA,IAAI,EAAEF,YAAY,CAACE,IAApB;AAA0BC,IAAAA,MAAM,EAAEH,YAAY,CAACG;AAA/C,GAArB,CADqC,CAErC;AACA;;AACA,MAAIC,QAAJ;;AACA,MAAIJ,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsBD,QAAtB,KAAmC,CAAvC,EAA0C;AACzCA,IAAAA,QAAQ,GAAG,CAAX;AACA,GAFD,MAEO,IAAIJ,YAAY,CAACR,KAAb,IAAsBQ,YAAY,CAACN,KAAvC,EAA8C;AACpDU,IAAAA,QAAQ,GAAIf,QAAQ,CAACW,YAAY,CAACR,KAAd,EAAqBQ,YAAY,CAACN,KAAlC,CAAR,GAAmD,CAA/D;AACA,GAFM,MAEA;AACN;AACA,UAAMY,QAAQ,GAAG,IAAIb,IAAJ,CAASO,YAAY,CAACR,KAAtB,CAAjB;AACAc,IAAAA,QAAQ,CAACC,WAAT,CAAqB,IAArB;AACAH,IAAAA,QAAQ,GAAGf,QAAQ,CAACiB,QAAD,EAAWN,YAAY,CAACN,KAAxB,CAAR,GAAyC,CAApD;AACA;;AACD,QAAMc,QAAQ,GAAG,CAAC,GAAGR,YAAY,CAACK,KAAjB,CAAjB;AACAG,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,EAAC,GAAGA,QAAQ,CAAC,CAAD,CAAZ;AAAiBJ,IAAAA;AAAjB,GAAd;;AAEA,MAAII,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,KAAqB,KAAzB,EAAgC;AAC/BD,IAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,EAAC,GAAGA,QAAQ,CAAC,CAAD,CAAZ;AAAiBC,MAAAA,IAAI,EAAE,MAAvB;AAA+BC,MAAAA,MAAM,EAAEtB,QAAQ,CAAC,CAAD,CAAR,CAAYsB;AAAnD,KAAd;AACA,KAAC,MAAD,EAAQ,MAAR,EAAe,MAAf,EAAuBC,OAAvB,CAA+B,CAACC,IAAD,EAAMC,CAAN,KAAY;AAC1CL,MAAAA,QAAQ,CAACM,IAAT,CAAc,EAAC,GAAGN,QAAQ,CAAC,CAAD,CAAZ;AAAiBC,QAAAA,IAAI,EAACG,IAAtB;AAA4BF,QAAAA,MAAM,EAAEtB,QAAQ,CAACyB,CAAC,GAAC,CAAH,CAAR,CAAcH;AAAlD,OAAd;AACA,KAFD;AAGA;;AAEDT,EAAAA,cAAc,CAACI,KAAf,GAAuBG,QAAvB;AACA,QAAMO,OAAO,GAAGf,YAAY,CAACK,KAAb,CAAmB,CAAnB,EAAsBW,QAAtB,CAA+BC,MAA/B,KAA0C,CAA1C,GAA8CjB,YAAY,CAACN,KAAb,CAAmBwB,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAA9C,GAA+ElB,YAAY,CAACN,KAA5G;AACAO,EAAAA,cAAc,CAACkB,IAAf,GAAsBJ,OAAtB,CA3BqC,CA6BrC;;AACAd,EAAAA,cAAc,GAAG,EAAC,GAAGA,cAAJ;AAAoB,OAAGD,YAAY,CAACoB;AAApC,GAAjB,CA9BqC,CAgCrC;;AACA,MAAInB,cAAc,CAACoB,GAAnB,EAAwB;AACvBpB,IAAAA,cAAc,GAAG,EAAC,GAAGA,cAAJ;AAAoBE,MAAAA,MAAM,EAAE;AAA5B,KAAjB;AACA;;AAED,SAAOF,cAAP;AACA,CAtCD;;AAwCA,SAASF,WAAT","sourcesContent":["import { elements } from '../utilities/constants';\n\nconst dateDiff = (date1, date2) => {\n\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n\tconst one_day = 1000 * 60 * 60 * 24;\n\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n};\n\t\nconst buildParams = (input_params) => {\n\tlet paramsToSubmit = {grid: input_params.grid, output: input_params.output};\n\t//console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\tvar duration;\n\tif (input_params.elems[0].duration === 1) {\n\t\tduration = 1;\n\t} else if (input_params.sdate <= input_params.edate) {\n\t\tduration =  dateDiff(input_params.sdate, input_params.edate) + 1;\n\t} else {\n\t\t// dates wrap around year border\n\t\tconst newStart = new Date(input_params.sdate);\n\t\tnewStart.setFullYear(2018);\n\t\tduration = dateDiff(newStart, input_params.edate) + 1;\n\t}\n\tconst newElems = [...input_params.elems];\n\tnewElems[0] = {...newElems[0], duration};\n\n\tif (newElems[0].name === 'all') {\n\t\tnewElems[0] = {...newElems[0], name: 'maxt', reduce: elements[0].reduce};\n\t\t['mint','avgt','pcpn'].forEach((elem,i) => {\n\t\t\tnewElems.push({...newElems[0], name:elem, reduce: elements[i+1].reduce});\n\t\t})\n\t}\n\n\tparamsToSubmit.elems = newElems;\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tparamsToSubmit.date = newDate;\n\n\t// areaDef is used to determine whether to send \"state\", \"county\" or \"bbox\" or \"loc\".\n\tparamsToSubmit = {...paramsToSubmit, ...input_params.areaDef};\n\t\n\t// point location can only be json\n\tif (paramsToSubmit.loc) {\n\t\tparamsToSubmit = {...paramsToSubmit, output: \"json\"};\n\t}\n\n\treturn paramsToSubmit;\t\n};\n\nexport { buildParams };"]},"metadata":{},"sourceType":"module"}