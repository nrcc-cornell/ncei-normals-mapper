{"ast":null,"code":"import { elements } from '../utilities/constants'; //const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\nconst buildParams = input_params => {\n  let paramsToSubmit = {\n    grid: input_params.grid,\n    output: input_params.output\n  }; //console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\n  const mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n  const duration = mndiff + (mndiff >= 0 ? 1 : 13);\n  input_params.elems[0].duration = duration;\n  const newElems = [...input_params.elems];\n  newElems[0] = { ...newElems[0],\n    duration\n  };\n\n  if (newElems[0].name === 'all') {\n    newElems[0] = { ...newElems[0],\n      name: 'maxt',\n      reduce: elements[0].reduce\n    };\n    ['mint', 'avgt', 'pcpn'].forEach((elem, i) => {\n      newElems.push({ ...newElems[0],\n        name: elem,\n        reduce: elements[i + 1].reduce\n      });\n    });\n  }\n\n  paramsToSubmit.elems = newElems;\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  paramsToSubmit.date = newDate; // areaDef is type (e.g. state, loc, county) and value of area of interest.\n\n  paramsToSubmit = { ...paramsToSubmit,\n    ...input_params.areaDef\n  }; // point location can only be json\n\n  if (paramsToSubmit.loc) {\n    paramsToSubmit = { ...paramsToSubmit,\n      output: \"json\"\n    };\n  }\n\n  return paramsToSubmit;\n}; // find bounding box around one or more states\n\n\nconst multiStateBbox = meta => {\n  var bbox = {\n    xn: 0,\n    xs: 999,\n    xw: 0,\n    xe: -999\n  };\n  meta.forEach(element => {\n    const [n, w, s, e] = [...element.bbox];\n\n    if (n > bbox.xn) {\n      bbox.xn = n;\n    }\n\n    if (s < bbox.xs) {\n      bbox.xs = s;\n    }\n\n    if (w < bbox.xw) {\n      bbox.xw = w;\n    }\n\n    if (e > bbox.xe) {\n      bbox.xe = e;\n    }\n  });\n  return [bbox.xn, bbox.xw, bbox.xs, bbox.xe];\n};\n\nexport { buildParams, multiStateBbox };","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["elements","buildParams","input_params","paramsToSubmit","grid","output","mndiff","parseInt","edate","split","sdate","duration","elems","newElems","name","reduce","forEach","elem","i","push","newDate","interval","length","slice","date","areaDef","loc","multiStateBbox","meta","bbox","xn","xs","xw","xe","element","n","w","s","e"],"mappings":"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","sourcesContent":["import { elements } from '../utilities/constants';\n\n//const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\t\nconst buildParams = (input_params) => {\n\tlet paramsToSubmit = {grid: input_params.grid, output: input_params.output};\n\t//console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\tconst mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n\tconst duration = mndiff + (mndiff >= 0 ? 1 : 13);\n\tinput_params.elems[0].duration = duration;\n\t\n\tconst newElems = [...input_params.elems];\n\tnewElems[0] = {...newElems[0], duration};\n\n\tif (newElems[0].name === 'all') {\n\t\tnewElems[0] = {...newElems[0], name: 'maxt', reduce: elements[0].reduce};\n\t\t['mint','avgt','pcpn'].forEach((elem,i) => {\n\t\t\tnewElems.push({...newElems[0], name:elem, reduce: elements[i+1].reduce});\n\t\t});\n\t}\n\tparamsToSubmit.elems = newElems;\n\t\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tparamsToSubmit.date = newDate;\n\n\t// areaDef is type (e.g. state, loc, county) and value of area of interest.\n\tparamsToSubmit = {...paramsToSubmit, ...input_params.areaDef};\n\t\n\t// point location can only be json\n\tif (paramsToSubmit.loc) {\n\t\tparamsToSubmit = {...paramsToSubmit, output: \"json\"};\n\t}\n\n\treturn paramsToSubmit;\t\n};\n\n// find bounding box around one or more states\nconst multiStateBbox = meta => {\n\tvar bbox = {xn:0, xs:999, xw:0, xe:-999};\n\tmeta.forEach(element => {\n\t\tconst [n,w,s,e] = [...element.bbox];\n\t\tif (n > bbox.xn) {\n\t\t\tbbox.xn = n;\n\t\t}\n\t\tif (s < bbox.xs) {\n\t\t\tbbox.xs = s;\n\t\t}\n\t\tif (w < bbox.xw) {\n\t\t\tbbox.xw = w;\n\t\t}\n\t\tif (e > bbox.xe) {\n\t\t\tbbox.xe = e;\n\t\t}\n\t});\n\treturn [bbox.xn,bbox.xw,bbox.xs,bbox.xe];\n}\n\nexport { buildParams, multiStateBbox };"]},"metadata":{},"sourceType":"module"}