{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/RenderDate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nimport { months } from '../utilities/constants'; // This component was modified from the original to only allow month selection\n\nconst useStyles = makeStyles(theme => ({\n  dateGroup: {\n    display: \"inline-block\",\n    border: \"1px solid rgba(0, 0, 0, 0.23)\",\n    borderRadius: \"4px\",\n    padding: \"0 0.6em\",\n    margin: \"0.6em 0 0.6em 0\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\"\n  },\n  dateGroupLegend: {\n    fontSize: \"95%\"\n  },\n  textfield: {\n    marginRight: \"0.5em\"\n  },\n  menuitem: {\n    paddingTop: \"1px\",\n    paddingBottom: \"1px\"\n  }\n}));\n\nconst RenderDate = props => {\n  _s();\n\n  const {\n    dateLegend,\n    dateParam\n  } = props;\n  const inputContext = useContext(InputParamsContext);\n  const [, initMonth] = inputContext.inputParams[dateParam === 'date' ? 'edate' : dateParam].split(\"-\");\n  const [selectMonth, setSelectMonth] = useState(initMonth);\n  const classes = useStyles();\n\n  const updateDate = newMonth => {\n    const newdate = [\"2019\", newMonth].join(\"-\");\n\n    if (dateParam === 'date') {\n      console.log('both ' + newdate);\n      inputContext.updateInputParams({\n        sdate: newdate\n      });\n      inputContext.updateInputParams({\n        edate: newdate\n      });\n    } else {\n      inputContext.updateInputParams({\n        [dateParam]: newdate\n      });\n    }\n  };\n\n  const handleChangeMonth = () => event => {\n    const newMonth = event.target.value;\n    setSelectMonth(newMonth);\n    updateDate(newMonth);\n  };\n\n  const serialMonthOptions = () => {\n    return months.map((option, i) => {\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        className: classes.menuitem,\n        value: (\"0\" + (i + 1)).slice(-2),\n        children: option\n      }, \"m\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 6\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: classes.dateGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        className: classes.dateGroupLegend,\n        children: dateLegend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        value: selectMonth,\n        id: \"selectMonth\",\n        onChange: handleChangeMonth(),\n        className: classes.textfield,\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialMonthOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(RenderDate, \"gTfmrxYhHlRZdpGuQqB/fCgEh2s=\", false, function () {\n  return [useStyles];\n});\n\n_c = RenderDate;\nexport default RenderDate;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderDate\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/RenderDate.js"],"names":["React","useState","useContext","TextField","MenuItem","makeStyles","InputParamsContext","months","useStyles","theme","dateGroup","display","border","borderRadius","padding","margin","fontFamily","dateGroupLegend","fontSize","textfield","marginRight","menuitem","paddingTop","paddingBottom","RenderDate","props","dateLegend","dateParam","inputContext","initMonth","inputParams","split","selectMonth","setSelectMonth","classes","updateDate","newMonth","newdate","join","console","log","updateInputParams","sdate","edate","handleChangeMonth","event","target","value","serialMonthOptions","map","option","i","slice","native"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nimport { months } from '../utilities/constants';\n\n// This component was modified from the original to only allow month selection\n\nconst useStyles = makeStyles((theme) => ({\n\tdateGroup: {\n\t\tdisplay: \"inline-block\",\n\t\tborder: \"1px solid rgba(0, 0, 0, 0.23)\",\n\t\tborderRadius: \"4px\",\n\t\tpadding: \"0 0.6em\",\n\t\tmargin: \"0.6em 0 0.6em 0\",\n\t\tfontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n\t},\n\tdateGroupLegend: {\n\t\tfontSize: \"95%\",\n\t},\n\ttextfield: {\n\t\tmarginRight: \"0.5em\",\n\t},\n\tmenuitem: {\n\t\tpaddingTop: \"1px\",\n\t\tpaddingBottom: \"1px\",\n\t},\n}));\n\nconst RenderDate = (props) => {\n\tconst { dateLegend, dateParam } = props;\n\tconst inputContext = useContext(InputParamsContext);\n\tconst [, initMonth] = inputContext.inputParams[dateParam === 'date' ? 'edate' : dateParam].split(\"-\");\n\tconst [selectMonth, setSelectMonth] = useState(initMonth);\n\tconst classes = useStyles();\n\n\tconst updateDate = (newMonth) => {\n\t\tconst newdate = [\"2019\", newMonth].join(\"-\");\n\t\tif (dateParam === 'date') {\n\t\t\tconsole.log('both ' + newdate)\n\t\t\tinputContext.updateInputParams({sdate:newdate});\n\t\t\tinputContext.updateInputParams({edate:newdate});\n\t\t} else {\n\t\t\tinputContext.updateInputParams({[dateParam]:newdate});\n\t\t}\n\t};\n\t\n\tconst handleChangeMonth = () => event => {\n\t\tconst newMonth = event.target.value;\n\t\tsetSelectMonth(newMonth);\n\t\tupdateDate(newMonth);\n\t};\n\n\tconst serialMonthOptions = () => {\n\t\treturn (\n\t\t\tmonths.map((option,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<MenuItem \n\t\t\t\t\t\tkey={\"m\"+i} \n\t\t\t\t\t\tclassName={classes.menuitem}\n\t\t\t\t\t\tvalue={(\"0\" + (i+1)).slice(-2)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option}\n\t\t\t\t\t</MenuItem>\n\t\t\t\t)\n\t\t\t})\n\t\t);\n\t};\t\n\n\treturn (\n\t\t<>\n\t\t\t<fieldset className={classes.dateGroup}>\n\t\t\t\t<legend className={classes.dateGroupLegend}>{dateLegend}</legend>\n\t\t\t\t<TextField\n\t\t\t\t\tselect\n\t\t\t\t\tvalue={selectMonth}\n\t\t\t\t\tid=\"selectMonth\"\n\t\t\t\t\tonChange={handleChangeMonth()}\n\t\t\t\t\tclassName={classes.textfield}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t>\n\t\t\t\t\t{serialMonthOptions()}\n\t\t\t\t</TextField>\n\t\t\t</fieldset>\n\t\t</>\n\t)\n}\n\nexport default RenderDate;"]},"metadata":{},"sourceType":"module"}