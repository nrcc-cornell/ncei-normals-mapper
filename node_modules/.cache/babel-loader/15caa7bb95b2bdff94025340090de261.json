{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/GetImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DisplayMap from \"./DisplayMap\";\nimport InputParamsContext from './InputParamsContext';\n\nconst GetImage = () => {\n  _s();\n\n  const [mapBlob, setMapBlob] = useState();\n  const [mapError, setMapError] = useState();\n  const [loading, setLoading] = useState(false);\n  const [submittedParams, setSubmittedParams] = useState();\n  const inputContext = useContext(InputParamsContext);\n\n  const dateDiff = (date1, date2) => {\n    const sdate = date1 instanceof Date ? date1 : new Date(date1);\n    const edate = date2 instanceof Date ? date2 : new Date(date2);\n    const one_day = 1000 * 60 * 60 * 24;\n    return Math.round((edate.getTime() - sdate.getTime()) / one_day);\n  };\n\n  const buildParams = input_params => {\n    // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n    //  do this on a copy, retaining sdate and edate for subsequent requests.\n    var duration;\n\n    if (input_params.elems[0].duration === 1) {\n      duration = 1;\n    } else if (input_params.sdate <= input_params.edate) {\n      duration = dateDiff(input_params.sdate, input_params.edate) + 1;\n    } else {\n      // dates wrap around year border\n      const newStart = new Date(input_params.sdate);\n      newStart.setFullYear(2018);\n      duration = dateDiff(newStart, input_params.edate) + 1;\n    }\n\n    const newElems = { ...input_params.elems\n    };\n    newElems[0] = { ...newElems[0],\n      duration\n    };\n    const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n    const paramsToSubmit = { ...input_params,\n      date: newDate,\n      elems: newElems\n    };\n    delete paramsToSubmit.sdate;\n    delete paramsToSubmit.edate;\n    return JSON.stringify(paramsToSubmit);\n  };\n\n  const fetchMap = jsonparams => {\n    fetch(\"https://grid2.rcc-acis.org/GridData\", {\n      body: jsonparams,\n      method: \"POST\"\n    }).then(response => {\n      if (!response.ok) {\n        setMapError(\"Error fetching the map\");\n        return;\n      }\n\n      return response.blob();\n    }).then(responseBlob => {\n      setMapBlob(URL.createObjectURL(responseBlob));\n    }).catch(err => {\n      setMapError(err.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    // Reset \n    setMapBlob();\n    setMapError();\n    setLoading(true); // Build parameters\n\n    const jsonparams = buildParams(inputContext.inputParams);\n    setSubmittedParams(jsonparams); // Get map\n\n    fetchMap(jsonparams); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputContext.inputParams]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this), mapBlob && submittedParams && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DisplayMap, {\n        imgsrc: mapBlob\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: submittedParams\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true), mapError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", mapError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GetImage, \"Y1BRp1dhdKSPDQqac3KXtks8zGE=\");\n\n_c = GetImage;\nexport default GetImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetImage\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/GetImage.js"],"names":["React","useEffect","useState","useContext","CircularProgress","DisplayMap","InputParamsContext","GetImage","mapBlob","setMapBlob","mapError","setMapError","loading","setLoading","submittedParams","setSubmittedParams","inputContext","dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","buildParams","input_params","duration","elems","newStart","setFullYear","newElems","newDate","interval","length","slice","paramsToSubmit","date","JSON","stringify","fetchMap","jsonparams","fetch","body","method","then","response","ok","blob","responseBlob","URL","createObjectURL","catch","err","message","finally","inputParams"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext} from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DisplayMap from \"./DisplayMap\";\nimport InputParamsContext from './InputParamsContext';\n\nconst GetImage = () => {\n\tconst [mapBlob, setMapBlob] = useState();\n\tconst [mapError, setMapError] = useState();\n\tconst [loading, setLoading] = useState(false);\n\tconst [submittedParams, setSubmittedParams] = useState();\n\tconst inputContext = useContext(InputParamsContext);\n\n\tconst dateDiff = (date1, date2) => {\n\t\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n\t\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n\t\tconst one_day = 1000 * 60 * 60 * 24;\n\t\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n\t};\n\n\tconst buildParams = (input_params) => {\n\t\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n\t\t//  do this on a copy, retaining sdate and edate for subsequent requests.\n\t\tvar duration;\n\t\tif (input_params.elems[0].duration === 1) {\n\t\t\tduration = 1;\n\t\t} else if (input_params.sdate <= input_params.edate) {\n\t\t\tduration =  dateDiff(input_params.sdate, input_params.edate) + 1;\n\t\t} else {\n\t\t\t// dates wrap around year border\n\t\t\tconst newStart = new Date(input_params.sdate);\n\t\t\tnewStart.setFullYear(2018);\n\t\t\tduration = dateDiff(newStart, input_params.edate) + 1;\n\t\t}\n\t\tconst newElems = {...input_params.elems};\n\t\tnewElems[0] = {...newElems[0], duration};\n\t\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\t\tconst paramsToSubmit = {...input_params, date: newDate, elems: newElems};\n\t\tdelete paramsToSubmit.sdate;\n\t\tdelete paramsToSubmit.edate;\n\t\treturn JSON.stringify(paramsToSubmit);\t\n\t};\n\n\tconst fetchMap = (jsonparams) => {\n\t\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: jsonparams, method: \"POST\"})\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tsetMapError(\"Error fetching the map\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn response.blob()\n\t\t\t})\n\t\t\t.then(responseBlob => {\n\t\t\t\t\tsetMapBlob(URL.createObjectURL(responseBlob));\n\t\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tsetMapError(err.message);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\t// Reset \n\t\tsetMapBlob();\n\t\tsetMapError();\n\t\tsetLoading(true);\n\t\t// Build parameters\n\t\tconst jsonparams = buildParams(inputContext.inputParams);\n\t\tsetSubmittedParams(jsonparams);\n\t\t// Get map\n\t\tfetchMap(jsonparams);\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [inputContext.inputParams]);\n\n\treturn (\n\t\t<>\n\t\t\t{loading &&\n\t\t\t\t<CircularProgress />\n\t\t\t}\n\t\t\t{mapBlob && submittedParams &&\n\t\t\t\t<>\n\t\t\t\t\t<DisplayMap \n\t\t\t\t\t\timgsrc={mapBlob}\n\t\t\t\t\t/>\n\t\t\t\t\t<p>{submittedParams}</p>\n\t\t\t\t</>\n\t\t\t}\n\t\t\t{mapError &&\n\t\t\t\t<p>Error: {mapError}</p>\n\t\t\t}\n\t\t</>\n\t);\n}\n\nexport default GetImage;"]},"metadata":{},"sourceType":"module"}