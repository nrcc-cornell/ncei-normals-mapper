{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/GetImage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DisplayMap from \"./DisplayMap\";\nimport InputParamsContext from './InputParamsContext';\n\nconst GetImage = () => {\n  _s();\n\n  const [mapBlob, setMapBlob] = useState();\n  const [mapError, setMapError] = useState();\n  const [loading, setLoading] = useState(false);\n  const inputContext = useContext(InputParamsContext);\n\n  const dateDiff = (date1, date2) => {\n    const sdate = new Date(date1);\n    const edate = new Date(date2);\n    const one_day = 1000 * 60 * 60 * 24;\n    return Math.round((edate.getTime() - sdate.getTime()) / one_day);\n  };\n\n  const fetchMap = () => {\n    // Reset \n    setMapBlob();\n    setMapError();\n    setLoading(true); // Calculate duration based on sdate and edate; use just date instead of sdate and edate\n    //  do this on a copy because we need to retain sdate and edate for subsequent requests\n\n    const input_params = inputContext.inputParams;\n    const duration = dateDiff(input_params.sdate, input_params.edate) + 1;\n    const newElems = input_params.elems;\n    newElems[0] = { ...newElems[0],\n      duration\n    };\n    const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n    const paramsToSubmit = { ...input_params,\n      date: newDate,\n      elems: newElems\n    };\n    delete paramsToSubmit.sdate;\n    delete paramsToSubmit.edate;\n    fetch(\"https://grid2.rcc-acis.org/GridData\", {\n      body: JSON.stringify(paramsToSubmit),\n      method: \"POST\"\n    }).then(response => {\n      if (!response.ok) {\n        setMapError(\"Error fetching the map\");\n        return;\n      }\n\n      return response.blob();\n    }).then(responseBlob => {\n      setMapBlob(URL.createObjectURL(responseBlob));\n    }).catch(err => {\n      setMapError(err.message);\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    fetchMap();\n  }, [inputContext.inputParams]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }, this), mapBlob && /*#__PURE__*/_jsxDEV(DisplayMap, {\n      imgsrc: mapBlob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }, this), mapError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", mapError]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GetImage, \"+MyYH652EAlK+COJFfRnP49qjcU=\");\n\n_c = GetImage;\nexport default GetImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetImage\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/GetImage.js"],"names":["React","useEffect","useState","useContext","CircularProgress","DisplayMap","InputParamsContext","GetImage","mapBlob","setMapBlob","mapError","setMapError","loading","setLoading","inputContext","dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","fetchMap","input_params","inputParams","duration","newElems","elems","newDate","interval","length","slice","paramsToSubmit","date","fetch","body","JSON","stringify","method","then","response","ok","blob","responseBlob","URL","createObjectURL","catch","err","message","finally"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext} from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DisplayMap from \"./DisplayMap\";\nimport InputParamsContext from './InputParamsContext';\n\nconst GetImage = () => {\n\tconst [mapBlob, setMapBlob] = useState();\n\tconst [mapError, setMapError] = useState();\n\tconst [loading, setLoading] = useState(false);\n\tconst inputContext = useContext(InputParamsContext);\n\n\tconst dateDiff = (date1, date2) => {\n\t\tconst sdate = new Date(date1);\n\t\tconst edate = new Date(date2);\n\t\tconst one_day = 1000 * 60 * 60 * 24;\n\t\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n\t};\n\tconst fetchMap = () => {\n\t\t// Reset \n\t\tsetMapBlob();\n\t\tsetMapError();\n\t\tsetLoading(true);\n\n\t\t// Calculate duration based on sdate and edate; use just date instead of sdate and edate\n\t\t//  do this on a copy because we need to retain sdate and edate for subsequent requests\n\t\tconst input_params = inputContext.inputParams;\n\t\tconst duration = dateDiff(input_params.sdate, input_params.edate) + 1\n\t\tconst newElems = input_params.elems;\n\t\tnewElems[0] = {...newElems[0], duration};\n\t\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\t\tconst paramsToSubmit = {...input_params, date: newDate, elems: newElems};\n\t\tdelete paramsToSubmit.sdate;\n\t\tdelete paramsToSubmit.edate;\n\n\t\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: JSON.stringify(paramsToSubmit), method: \"POST\"})\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tsetMapError(\"Error fetching the map\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn response.blob()\n\t\t\t})\n\t\t\t.then(responseBlob => {\n\t\t\t\t\tsetMapBlob(URL.createObjectURL(responseBlob));\n\t\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tsetMapError(err.message);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\tfetchMap();\n\t}, [inputContext.inputParams]);\n\n\treturn (\n\t\t<>\n\t\t\t{loading &&\n\t\t\t\t<CircularProgress />\n\t\t\t}\n\t\t\t{mapBlob &&\n\t\t\t\t<DisplayMap \n\t\t\t\t\timgsrc={mapBlob}\n\t\t\t\t/>\n\t\t\t}\n\t\t\t{mapError &&\n\t\t\t\t<p>Error: {mapError}</p>\n\t\t\t}\n\t\t</>\n\t);\n}\n\nexport default GetImage;"]},"metadata":{},"sourceType":"module"}