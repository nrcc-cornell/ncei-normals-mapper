{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport InfoAdornment from './InfoAdornment';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\nconst useStyles = makeStyles(theme => ({\n  colorsContainer: {\n    marginTop: \"0.75em\"\n  },\n  colorFormControl: {\n    width: \"100%\"\n  },\n  colorInputLabel: {\n    color: \"rgba(0,0,0,0.87)\"\n  }\n}));\n\nconst ColorsSelect = () => {\n  _s();\n\n  const [colors, setColors] = useState(\"\");\n  const [colorError, setColorError] = useState(false);\n  const classes = useStyles();\n  const inputContext = useContext(InputParamsContext);\n\n  const handleColorChange = event => {\n    const newcolors = event.target.value.replace(\" \", \"\");\n    ;\n    setColors(newcolors);\n    inputContext.updateInputParams({\n      image: { ...inputContext.inputParams.image,\n        cmap: newcolors\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (inputContext.colors.server) {\n      const newcolors = inputContext.colors.server.join(\",\");\n      setColors(newcolors);\n    }\n  }, [inputContext.colors.server]);\n  useEffect(() => {\n    console.log(typeof inputContext.inputParams.image.levels + \" \" + inputContext.inputParams.image.levels);\n\n    if (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0 && colors) {\n      console.log(inputContext.inputParams.image.levels.split(\",\").length);\n      const levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n      const colorLength = colors.split(\",\").length;\n      setColorError(levelLength !== colorLength - 1);\n    }\n  }, [inputContext.inputParams.image.levels, colors]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.colorsContainer,\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      variant: \"outlined\",\n      className: classes.colorFormControl,\n      error: colorError,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        htmlFor: \"colorInput\",\n        className: classes.colorInputLabel,\n        children: \"Colors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n        value: colors,\n        id: \"colorInput\",\n        label: \"Colors\",\n        margin: \"dense\",\n        inputProps: {\n          spellCheck: false\n        },\n        onChange: handleColorChange,\n        endAdornment: /*#__PURE__*/_jsxDEV(InfoAdornment, {\n          content: infoText.colors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n        children: colorError ? \"Must have one more color than levels\" : \"Comma-separated color code list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      className: classes.keyContainer,\n      children: colors && /*#__PURE__*/_jsxDEV(Table, {\n        size: \"small\",\n        padding: \"none\",\n        \"aria-label\": \"color table\",\n        children: /*#__PURE__*/_jsxDEV(TableBody, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: colors.split(\",\").map((cs, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n              style: {\n                backgroundColor: \"\" + cs + \"\"\n              },\n              children: \"cs\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 10\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ColorsSelect, \"baxyaEkjtsDSmSj8H33YzdpsxB0=\", false, function () {\n  return [useStyles];\n});\n\n_c = ColorsSelect;\nexport default ColorsSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorsSelect\");","map":{"version":3,"sources":["/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js"],"names":["React","useState","useEffect","useContext","makeStyles","FormControl","InputLabel","OutlinedInput","FormHelperText","Table","TableBody","TableCell","TableContainer","TableRow","InfoAdornment","InputParamsContext","infoText","useStyles","theme","colorsContainer","marginTop","colorFormControl","width","colorInputLabel","color","ColorsSelect","colors","setColors","colorError","setColorError","classes","inputContext","handleColorChange","event","newcolors","target","value","replace","updateInputParams","image","inputParams","cmap","server","join","console","log","levels","length","split","levelLength","colorLength","spellCheck","keyContainer","map","cs","i","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport InfoAdornment from './InfoAdornment';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\n\nconst useStyles = makeStyles((theme) => ({\n    colorsContainer: {\n        marginTop: \"0.75em\",\n    },\n    colorFormControl: {\n        width: \"100%\",\n    },\n\tcolorInputLabel: {\n\t\tcolor: \"rgba(0,0,0,0.87)\",\n\t},\n}));\n\nconst ColorsSelect = () => {\n\tconst [ colors, setColors ] = useState(\"\");\n\tconst [ colorError, setColorError ] = useState(false);\n\tconst classes = useStyles();\n\tconst inputContext = useContext(InputParamsContext);\n\t\n\tconst handleColorChange = (event) => {\n\t\tconst newcolors = event.target.value.replace(\" \",\"\");;\n\t\tsetColors(newcolors);\n\t\tinputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newcolors}});\n\t};\n\n\tuseEffect(() => {\n\t\tif (inputContext.colors.server) {\n\t\t\tconst newcolors = inputContext.colors.server.join(\",\");\n\t\t\tsetColors(newcolors);\t\n\t\t}\n\t}, [inputContext.colors.server]);\n\n\tuseEffect(() => {\n        console.log(typeof inputContext.inputParams.image.levels + \" \" + inputContext.inputParams.image.levels)\n\t\tif (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0 && colors) {\n            console.log(inputContext.inputParams.image.levels.split(\",\").length)\n\t\t\tconst levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n            const colorLength = colors.split(\",\").length;\n            setColorError(levelLength !== colorLength - 1);\n\t\t}\n\t}, [inputContext.inputParams.image.levels, colors]);\n\n\treturn ( \n        <div className={classes.colorsContainer}>\n            <FormControl variant=\"outlined\" className={classes.colorFormControl} error={colorError}>\n                <InputLabel htmlFor=\"colorInput\" className={classes.colorInputLabel}>Colors</InputLabel>\n                <OutlinedInput\n                    value={colors}\n                    id=\"colorInput\"\n                    label=\"Colors\"\n                    margin=\"dense\"\n                    inputProps={{ spellCheck: false }}\n                    onChange={handleColorChange}\n                    endAdornment={<InfoAdornment content={infoText.colors} />}\n                />\n                <FormHelperText>{colorError ? \"Must have one more color than levels\" : \"Comma-separated color code list\"}</FormHelperText>\n            </FormControl>\n\t\t\t<TableContainer className={classes.keyContainer}>\n\t\t\t\t{colors &&\n\t\t\t\t\t<Table size=\"small\" padding=\"none\" aria-label=\"color table\">\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t{colors.split(\",\").map((cs, i) => (\n\t\t\t\t\t\t\t\t\t<TableCell key={i} style={{backgroundColor:\"\" + cs + \"\"}}>cs</TableCell>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</TableRow>\t\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t}\n\t\t\t</TableContainer>\n\t\t</div>\n\t);\n}\n\nexport default ColorsSelect;"]},"metadata":{},"sourceType":"module"}