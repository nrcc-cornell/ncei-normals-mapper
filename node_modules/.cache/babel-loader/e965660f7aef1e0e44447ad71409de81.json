{"ast":null,"code":"import _objectSpread from\"/Users/kle1/progs/React/normals-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/kle1/progs/React/normals-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import React,{useEffect,useState,useContext}from\"react\";import CircularProgress from\"@material-ui/core/CircularProgress\";import DisplayMap from\"./DisplayMap\";import InputParamsContext from'./InputParamsContext';var GetImage=function GetImage(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),mapBlob=_useState2[0],setMapBlob=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),mapError=_useState4[0],setMapError=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),loading=_useState6[0],setLoading=_useState6[1];var inputContext=useContext(InputParamsContext);var dateDiff=function dateDiff(date1,date2){var sdate=new Date(date1);var edate=new Date(date2);var one_day=1000*60*60*24;return Math.round((edate.getTime()-sdate.getTime())/one_day);};var fetchMap=function fetchMap(){// Reset \nsetMapBlob();setMapError();setLoading(true);// For \"interval\" date selection, calculate duration based on sdate and edate. Also use just date instead of sdate and edate;\n//  do this on a copy because we need to retain sdate and edate for subsequent requests.\nvar input_params=inputContext.inputParams;var duration=input_params.elems[0].duration===1?1:dateDiff(input_params.sdate,input_params.edate)+1;var newElems=input_params.elems;newElems[0]=_objectSpread(_objectSpread({},newElems[0]),{},{duration:duration});var newDate=input_params.elems[0].interval.length===2?input_params.edate.slice(0,7):input_params.edate;var paramsToSubmit=_objectSpread(_objectSpread({},input_params),{},{date:newDate,elems:newElems});delete paramsToSubmit.sdate;delete paramsToSubmit.edate;fetch(\"https://grid2.rcc-acis.org/GridData\",{body:JSON.stringify(paramsToSubmit),method:\"POST\"}).then(function(response){if(!response.ok){setMapError(\"Error fetching the map\");return;}return response.blob();}).then(function(responseBlob){setMapBlob(URL.createObjectURL(responseBlob));}).catch(function(err){setMapError(err.message);}).finally(function(){setLoading(false);});};useEffect(function(){fetchMap();},[inputContext.inputParams]);return/*#__PURE__*/_jsxs(_Fragment,{children:[loading&&/*#__PURE__*/_jsx(CircularProgress,{}),mapBlob&&/*#__PURE__*/_jsx(DisplayMap,{imgsrc:mapBlob}),mapError&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Error: \",mapError]})]});};export default GetImage;","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/GetImage.js"],"names":["React","useEffect","useState","useContext","CircularProgress","DisplayMap","InputParamsContext","GetImage","mapBlob","setMapBlob","mapError","setMapError","loading","setLoading","inputContext","dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","fetchMap","input_params","inputParams","duration","elems","newElems","newDate","interval","length","slice","paramsToSubmit","date","fetch","body","JSON","stringify","method","then","response","ok","blob","responseBlob","URL","createObjectURL","catch","err","message","finally"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext} from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport DisplayMap from \"./DisplayMap\";\nimport InputParamsContext from './InputParamsContext';\n\nconst GetImage = () => {\n\tconst [mapBlob, setMapBlob] = useState();\n\tconst [mapError, setMapError] = useState();\n\tconst [loading, setLoading] = useState(false);\n\tconst inputContext = useContext(InputParamsContext);\n\n\tconst dateDiff = (date1, date2) => {\n\t\tconst sdate = new Date(date1);\n\t\tconst edate = new Date(date2);\n\t\tconst one_day = 1000 * 60 * 60 * 24;\n\t\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n\t};\n\tconst fetchMap = () => {\n\t\t// Reset \n\t\tsetMapBlob();\n\t\tsetMapError();\n\t\tsetLoading(true);\n\n\t\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also use just date instead of sdate and edate;\n\t\t//  do this on a copy because we need to retain sdate and edate for subsequent requests.\n\t\tconst input_params = inputContext.inputParams;\n\t\tconst duration = input_params.elems[0].duration === 1 ? 1 : dateDiff(input_params.sdate, input_params.edate) + 1\n\t\tconst newElems = input_params.elems;\n\t\tnewElems[0] = {...newElems[0], duration};\n\t\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\t\tconst paramsToSubmit = {...input_params, date: newDate, elems: newElems};\n\t\tdelete paramsToSubmit.sdate;\n\t\tdelete paramsToSubmit.edate;\n\n\t\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: JSON.stringify(paramsToSubmit), method: \"POST\"})\n\t\t\t.then(response => {\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tsetMapError(\"Error fetching the map\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn response.blob()\n\t\t\t})\n\t\t\t.then(responseBlob => {\n\t\t\t\t\tsetMapBlob(URL.createObjectURL(responseBlob));\n\t\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tsetMapError(err.message);\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tsetLoading(false);\n\t\t\t});\n\t}\n\n\tuseEffect(() => {\n\t\tfetchMap();\n\t}, [inputContext.inputParams]);\n\n\treturn (\n\t\t<>\n\t\t\t{loading &&\n\t\t\t\t<CircularProgress />\n\t\t\t}\n\t\t\t{mapBlob &&\n\t\t\t\t<DisplayMap \n\t\t\t\t\timgsrc={mapBlob}\n\t\t\t\t/>\n\t\t\t}\n\t\t\t{mapError &&\n\t\t\t\t<p>Error: {mapError}</p>\n\t\t\t}\n\t\t</>\n\t);\n}\n\nexport default GetImage;"]},"metadata":{},"sourceType":"module"}