{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\nconst useStyles = makeStyles(theme => ({\n  colorsContainer: {\n    marginTop: \"0.75em\"\n  },\n  colorFormControl: {\n    width: \"100%\"\n  },\n  colorInputLabel: {\n    color: \"rgba(0,0,0,0.87)\"\n  },\n  colorbarContainer: {\n    marginTop: \"0.75em\"\n  },\n  listContainer: {\n    marginTop: \"0.5em\",\n    border: \"1pt solid lightgray\",\n    padding: 0\n  },\n  errormsg: {\n    color: \"red\",\n    marginTop: \"6px\",\n    fontSize: \"90%\"\n  }\n}));\n\nconst ColorsSelect = () => {\n  _s();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(13);\n  const [colors, setColors] = useState([]);\n  const [colorError, setColorError] = useState(false);\n  const classes = useStyles();\n  const inputContext = useContext(InputParamsContext);\n\n  const colormaps = require('../utilities/colorbrewer.json');\n\n  const colormap_keys = Object.keys(colormaps);\n\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index, cmp) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    const levelcnt = inputContext.inputParams.image.levels && inputContext.inputParams.image.levels.length >= 0 ? inputContext.inputParams.image.levels.split(\",\").length : inputContext.levels.server.length;\n\n    if (colormaps[colormap_keys[selectedIndex]].hasOwnProperty(levelcnt + 1)) {\n      const newColors = colormaps[cmp][levelcnt + 1];\n      setColors(newColors);\n\n      if (inputContext.levels.client.length === 0) {\n        inputContext.updateInputParams({\n          image: { ...inputContext.inputParams.image,\n            cmap: newColors,\n            levels: inputContext.levels.server.join(\",\")\n          }\n        });\n      } else {\n        inputContext.updateInputParams({\n          image: { ...inputContext.inputParams.image,\n            cmap: newColors\n          }\n        });\n      }\n\n      setColorError(false);\n    } else {\n      setColorError(true);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    if (inputContext.colors.server) {\n      setColors(inputContext.colors.server);\n    }\n  }, [inputContext.colors.server]);\n  useEffect(() => {\n    if (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0) {\n      const levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n\n      if (colormaps[colormap_keys[selectedIndex]].hasOwnProperty(levelLength + 1)) {\n        const newColors = colormaps[colormap_keys[selectedIndex]][levelLength + 1];\n        setColors(newColors);\n        inputContext.updateInputParams({\n          image: { ...inputContext.inputParams.image,\n            cmap: newColors\n          }\n        });\n        setColorError(false);\n      } else {\n        setColorError(true);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [inputContext.inputParams.image.levels]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.colorsContainer,\n    children: [colors.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        className: classes.listContainer,\n        \"aria-label\": \"color selection\",\n        children: /*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          \"aria-haspopup\": \"true\",\n          \"aria-controls\": \"color-map-menu\",\n          \"aria-label\": \"selected-color\",\n          onClick: handleClickListItem,\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: \"Click to change color map\",\n            secondary: \"Currently selected: \" + colormap_keys[selectedIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        id: \"color-map-menu\",\n        anchorEl: anchorEl,\n        keepMounted: true,\n        open: Boolean(anchorEl),\n        onClose: handleClose,\n        children: colormap_keys.map((cmp, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n          selected: index === selectedIndex,\n          value: cmp,\n          onClick: event => handleMenuItemClick(event, index, cmp),\n          children: cmp\n        }, cmp, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), !colorError && /*#__PURE__*/_jsxDEV(TableContainer, {\n        className: classes.colorbarContainer,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          size: \"small\",\n          padding: \"none\",\n          \"aria-label\": \"color table\",\n          children: /*#__PURE__*/_jsxDEV(TableBody, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: colors.map((cs, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n                style: {\n                  backgroundColor: \"\" + cs + \"\"\n                },\n                children: \"\\xA0\"\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 49\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true), colorError && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      className: classes.errormsg,\n      gutterBottom: true,\n      children: infoText.colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ColorsSelect, \"JHzYBdPwJyoHmUQDLJ3e6m/hZWQ=\", false, function () {\n  return [useStyles];\n});\n\n_c = ColorsSelect;\nexport default ColorsSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorsSelect\");","map":{"version":3,"sources":["/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js"],"names":["React","useState","useEffect","useContext","makeStyles","Table","TableBody","TableCell","TableContainer","TableRow","List","ListItem","ListItemText","Menu","MenuItem","Typography","InputParamsContext","infoText","useStyles","theme","colorsContainer","marginTop","colorFormControl","width","colorInputLabel","color","colorbarContainer","listContainer","border","padding","errormsg","fontSize","ColorsSelect","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","colors","setColors","colorError","setColorError","classes","inputContext","colormaps","require","colormap_keys","Object","keys","handleClickListItem","event","currentTarget","handleMenuItemClick","index","cmp","levelcnt","inputParams","image","levels","length","split","server","hasOwnProperty","newColors","client","updateInputParams","cmap","join","handleClose","levelLength","Boolean","map","cs","i","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\n\nconst useStyles = makeStyles((theme) => ({\n    colorsContainer: {\n        marginTop: \"0.75em\",\n    },\n    colorFormControl: {\n        width: \"100%\",\n    },\n\tcolorInputLabel: {\n\t\tcolor: \"rgba(0,0,0,0.87)\",\n\t},\n    colorbarContainer: {\n        marginTop: \"0.75em\",\n    },\n    listContainer: {\n\t\tmarginTop: \"0.5em\",\n\t\tborder: \"1pt solid lightgray\",\n\t\tpadding: 0,\n\t},\n    errormsg: {\n        color: \"red\",\n        marginTop: \"6px\",\n        fontSize: \"90%\",\n    },\n}));\n\nconst ColorsSelect = () => {\n    const [anchorEl, setAnchorEl] = useState(null);\n\tconst [selectedIndex, setSelectedIndex] = useState(13);\n\tconst [ colors, setColors ] = useState([]);\n\tconst [ colorError, setColorError ] = useState(false);\n\tconst classes = useStyles();\n\tconst inputContext = useContext(InputParamsContext);\n\n    const colormaps = require('../utilities/colorbrewer.json');\n    const colormap_keys = Object.keys(colormaps);\n\n    const handleClickListItem = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n    const handleMenuItemClick = (event, index, cmp) => {\n\t\tsetSelectedIndex(index);\n\t\tsetAnchorEl(null);\n        const levelcnt = (inputContext.inputParams.image.levels && inputContext.inputParams.image.levels.length >= 0) ? inputContext.inputParams.image.levels.split(\",\").length : inputContext.levels.server.length;\n        if (colormaps[colormap_keys[selectedIndex]].hasOwnProperty(levelcnt + 1)) {\n\t\t    const newColors = colormaps[cmp][levelcnt + 1];\n            setColors(newColors);\n            if (inputContext.levels.client.length === 0) {\n                inputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newColors, levels: inputContext.levels.server.join(\",\")}});\n            } else {\n                inputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newColors}});\n            }\n            setColorError(false);\n        } else {\n            setColorError(true);\n        }\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\tuseEffect(() => {\n\t\tif (inputContext.colors.server) {\n\t\t\tsetColors(inputContext.colors.server);\t\n\t\t}\n\t}, [inputContext.colors.server]);\n\n\tuseEffect(() => {\n\t\tif (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0) {\n\t\t\tconst levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n            if (colormaps[colormap_keys[selectedIndex]].hasOwnProperty(levelLength + 1)) {\n                const newColors = colormaps[colormap_keys[selectedIndex]][levelLength + 1];\n                setColors(newColors);\n                inputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newColors}});\n                setColorError(false);\n            } else {\n                setColorError(true);\n            }\n\t\t}\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [inputContext.inputParams.image.levels]);\n\n\treturn ( \n        <div className={classes.colorsContainer}>\n            {colors.length > 0 &&\n                <>\n                    <List className={classes.listContainer} aria-label=\"color selection\">\n                        <ListItem\n                            button\n                            aria-haspopup=\"true\"\n                            aria-controls=\"color-map-menu\"\n                            aria-label=\"selected-color\"\n                            onClick={handleClickListItem}\n                        >\n                            <ListItemText primary=\"Click to change color map\" secondary={\"Currently selected: \"+colormap_keys[selectedIndex]} />\n                        </ListItem>\n                    </List>\n                    <Menu\n                        id=\"color-map-menu\"\n                        anchorEl={anchorEl}\n                        keepMounted\n                        open={Boolean(anchorEl)}\n                        onClose={handleClose} \n                    >\n                        {colormap_keys.map((cmp, index) => (\n                            <MenuItem\n                                key={cmp}\n                                selected={index === selectedIndex}\n                                value={cmp}\n                                onClick={(event) => handleMenuItemClick(event, index, cmp)}\n                            >\n                                {cmp}\n                            </MenuItem>\n                        ))}\n                    </Menu>\n\n                    {!colorError &&\n                        <TableContainer className={classes.colorbarContainer}>\n                                <Table size=\"small\" padding=\"none\" aria-label=\"color table\">\n                                    <TableBody>\n                                        <TableRow>\n                                            {colors.map((cs, i) => (\n                                                <TableCell key={i} style={{backgroundColor:\"\" + cs + \"\"}}>&nbsp;</TableCell>\n                                            ))}\n                                        </TableRow>\t\n                                    </TableBody>\n                                </Table>\n                        </TableContainer>\n                    }\n                </>\n            }\n            {colorError &&\n                <Typography variant=\"body1\" className={classes.errormsg} gutterBottom>\n                    {infoText.colors}\n                </Typography>\n            }\n\t\t</div>\n\t);\n}\n\nexport default ColorsSelect;"]},"metadata":{},"sourceType":"module"}