{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/normals-viewer/src/components/RenderDate.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\nconst useStyles = makeStyles(theme => ({\n  dateGroup: {\n    display: \"inline-block\",\n    border: \"1px solid rgba(0, 0, 0, 0.23)\",\n    borderRadius: \"4px\",\n    padding: \"0 0.6em\",\n    margin: \"0.6em 0 0.6em 0\"\n  },\n  dateroupLegend: {\n    fontSize: \"95%\"\n  },\n  textfield: {\n    marginRight: \"0.5em\"\n  },\n  menuitem: {\n    paddingTop: \"1px\",\n    paddingBottom: \"1px\"\n  }\n}));\n\nconst RenderDate = props => {\n  _s();\n\n  const {\n    dateLegend,\n    dateParam,\n    startSame = false,\n    justMonth = false\n  } = props;\n  const inputContext = useContext(InputParamsContext);\n  const [, initMonth, initDay] = inputContext.inputParams[dateParam].split(\"-\");\n  const [selectMonth, setSelectMonth] = useState(initMonth);\n  const [selectDay, setSelectDay] = useState(initDay);\n  const classes = useStyles();\n  const monthChoices = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const dayMonths30 = ['04', '06', '09', '11'];\n\n  const dateDiff = (date1, date2) => {\n    const sdate = new Date(date1);\n    const edate = new Date(date2);\n    const one_day = 1000 * 60 * 60 * 24;\n    return Math.round((edate.getTime() - sdate.getTime()) / one_day);\n  };\n\n  const updateDate = (newMonth, newDay) => {\n    const newdate = [\"2020\", newMonth, newDay].join(\"-\");\n\n    if (startSame) {\n      inputContext.updateInputParams({\n        edate: newdate,\n        sdate: newdate\n      });\n    } else {\n      const input_params = inputContext.inputParams;\n      input_params[dateParam] = newdate;\n      const duration = Math.round(dateDiff(input_params.sdate, input_params.edate)) + 1;\n      console.log(duration);\n      inputContext.updateInputParams({\n        [dateParam]: newdate\n      });\n    }\n  };\n\n  const handleChangeMonth = () => event => {\n    const newMonth = event.target.value;\n    setSelectMonth(newMonth);\n\n    if (selectDay === '31' && dayMonths30.includes(newMonth)) {\n      setSelectDay('30');\n      updateDate(newMonth, '30');\n    } else if (selectDay >= '30' && event.target.value === '02') {\n      setSelectDay('29');\n      updateDate(newMonth, '29');\n    } else {\n      updateDate(newMonth, selectDay);\n    }\n\n    ;\n  };\n\n  const handleChangeDay = () => event => {\n    const newDay = event.target.value;\n    setSelectDay(newDay);\n    updateDate(selectMonth, newDay);\n  };\n\n  const serialMonthOptions = () => {\n    return monthChoices.map((option, i) => {\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        className: classes.menuitem,\n        value: (\"0\" + (i + 1)).slice(-2),\n        children: option\n      }, \"m\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 6\n      }, this);\n    });\n  };\n\n  const serialDayOptions = () => {\n    let arrlen = 31;\n\n    if (dayMonths30.includes(selectMonth)) {\n      arrlen = 30;\n    } else if (selectMonth === '02') {\n      arrlen = 29;\n    }\n\n    return Array.from({\n      length: arrlen\n    }, (v, k) => k + 1).map((option, i) => {\n      return /*#__PURE__*/_jsxDEV(MenuItem, {\n        className: classes.menuitem,\n        value: (\"0\" + (i + 1)).slice(-2),\n        children: option\n      }, \"d\" + i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      className: classes.dateGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n        className: classes.dateGroupLegend,\n        children: dateLegend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        value: selectMonth,\n        id: \"selectMonth\",\n        onChange: handleChangeMonth(),\n        className: classes.textfield,\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialMonthOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), !justMonth && /*#__PURE__*/_jsxDEV(TextField, {\n        select: true,\n        value: selectDay,\n        id: \"selectDay\",\n        onChange: handleChangeDay(),\n        margin: \"dense\",\n        SelectProps: {\n          native: false\n        },\n        children: serialDayOptions()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 4\n    }, this)\n  }, void 0, false);\n};\n\n_s(RenderDate, \"TRuOfKHdbYmlhwVUPaetfwezOhU=\", false, function () {\n  return [useStyles];\n});\n\n_c = RenderDate;\nexport default RenderDate;\n\nvar _c;\n\n$RefreshReg$(_c, \"RenderDate\");","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/components/RenderDate.js"],"names":["React","useState","useContext","TextField","MenuItem","makeStyles","InputParamsContext","useStyles","theme","dateGroup","display","border","borderRadius","padding","margin","dateroupLegend","fontSize","textfield","marginRight","menuitem","paddingTop","paddingBottom","RenderDate","props","dateLegend","dateParam","startSame","justMonth","inputContext","initMonth","initDay","inputParams","split","selectMonth","setSelectMonth","selectDay","setSelectDay","classes","monthChoices","dayMonths30","dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","updateDate","newMonth","newDay","newdate","join","updateInputParams","input_params","duration","console","log","handleChangeMonth","event","target","value","includes","handleChangeDay","serialMonthOptions","map","option","i","slice","serialDayOptions","arrlen","Array","from","length","v","k","dateGroupLegend","native"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputParamsContext from './InputParamsContext';\n\nconst useStyles = makeStyles((theme) => ({\n\tdateGroup: {\n\t\tdisplay: \"inline-block\",\n\t\tborder: \"1px solid rgba(0, 0, 0, 0.23)\",\n\t\tborderRadius: \"4px\",\n\t\tpadding: \"0 0.6em\",\n\t\tmargin: \"0.6em 0 0.6em 0\",\n\t},\n\tdateroupLegend: {\n\t\tfontSize: \"95%\",\n\t},\n\ttextfield: {\n\t\tmarginRight: \"0.5em\",\n\t},\n\tmenuitem: {\n\t\tpaddingTop: \"1px\",\n\t\tpaddingBottom: \"1px\",\n\t},\n}));\n\nconst RenderDate = (props) => {\n\tconst { dateLegend, dateParam, startSame=false, justMonth=false } = props;\n\tconst inputContext = useContext(InputParamsContext);\n\tconst [, initMonth, initDay] = inputContext.inputParams[dateParam].split(\"-\");\n\tconst [selectMonth, setSelectMonth] = useState(initMonth);\n\tconst [selectDay, setSelectDay] = useState(initDay);\n\tconst classes = useStyles();\n\tconst monthChoices = ['January','February','March','April','May','June','July','August','September','October','November','December'];\n\tconst dayMonths30 = ['04','06','09','11'];\n\n\tconst dateDiff = (date1, date2) => {\n\t\tconst sdate = new Date(date1);\n\t\tconst edate = new Date(date2);\n\t\tconst one_day = 1000 * 60 * 60 * 24;\n\t\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n\t}\n\n\tconst updateDate = (newMonth, newDay) => {\n\t\tconst newdate = [\"2020\", newMonth, newDay].join(\"-\");\n\t\tif (startSame) {\n\t\t\tinputContext.updateInputParams({edate:newdate, sdate:newdate});\n\t\t} else {\n\t\t\tconst input_params = inputContext.inputParams;\n\t\t\tinput_params[dateParam] = newdate;\n\t\t\tconst duration = Math.round(dateDiff(input_params.sdate, input_params.edate)) + 1\n\t\t\tconsole.log(duration)\n\t\t\tinputContext.updateInputParams({[dateParam]:newdate});\t\n\t\t}\n\t};\n\t\n\tconst handleChangeMonth = () => event => {\n\t\tconst newMonth = event.target.value;\n\t\tsetSelectMonth(newMonth);\n\t\tif (selectDay === '31' && dayMonths30.includes(newMonth)) {\n\t\t\tsetSelectDay('30');\n\t\t\tupdateDate(newMonth, '30');\n\t\t} else if (selectDay >= '30' && event.target.value === '02') {\n\t\t\tsetSelectDay('29');\n\t\t\tupdateDate(newMonth, '29');\n\t\t} else {\n\t\t\tupdateDate(newMonth, selectDay);\n\t\t};\n\t};\n\n\tconst handleChangeDay = () => event => {\n\t\tconst newDay = event.target.value;\n\t\tsetSelectDay(newDay);\n\t\tupdateDate(selectMonth, newDay);\n\t};\n\n\tconst serialMonthOptions = () => {\n\t\treturn (\n\t\t\tmonthChoices.map((option,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<MenuItem \n\t\t\t\t\t\tkey={\"m\"+i} \n\t\t\t\t\t\tclassName={classes.menuitem}\n\t\t\t\t\t\tvalue={(\"0\" + (i+1)).slice(-2)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option}\n\t\t\t\t</MenuItem>\n\t\t\t\t)\n\t\t\t})\n\t\t);\n\t};\t\n\t\n\tconst serialDayOptions = () => {\n\t\tlet arrlen = 31;\n\t\tif (dayMonths30.includes(selectMonth)) {\n\t\t\tarrlen = 30;\n\t\t} else if (selectMonth === '02') {\n\t\t\tarrlen = 29;\n\t\t}\n\t\treturn (\n\t\t\tArray.from({length: arrlen}, (v, k) => k+1).map((option,i) => {\n\t\t\t\treturn (\n\t\t\t\t\t<MenuItem \n\t\t\t\t\t\tkey={\"d\"+i} \n\t\t\t\t\t\tclassName={classes.menuitem}\n\t\t\t\t\t\tvalue={(\"0\" + (i+1)).slice(-2)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{option}\n\t\t\t\t</MenuItem>\n\t\t\t\t)\n\t\t\t})\n\t\t);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<fieldset className={classes.dateGroup}>\n\t\t\t\t<legend className={classes.dateGroupLegend}>{dateLegend}</legend>\n\t\t\t\t<TextField\n\t\t\t\t\tselect\n\t\t\t\t\tvalue={selectMonth}\n\t\t\t\t\tid=\"selectMonth\"\n\t\t\t\t\tonChange={handleChangeMonth()}\n\t\t\t\t\tclassName={classes.textfield}\n\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t>\n\t\t\t\t\t{serialMonthOptions()}\n\t\t\t\t</TextField>\n\t\t\t\t{!justMonth &&\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tselect\n\t\t\t\t\t\tvalue={selectDay}\n\t\t\t\t\t\tid=\"selectDay\"\n\t\t\t\t\t\tonChange={handleChangeDay()}\n\t\t\t\t\t\tmargin=\"dense\"\n\t\t\t\t\t\tSelectProps={{ native: false }}\n\t\t\t\t\t>\n\t\t\t\t\t\t{serialDayOptions()}\n\t\t\t\t\t</TextField>\n\t\t\t\t}\n\t\t\t</fieldset>\n\t\t</>\n\t)\n}\n\nexport default RenderDate;"]},"metadata":{},"sourceType":"module"}