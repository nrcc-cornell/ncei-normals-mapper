{"ast":null,"code":"import { elements, maxbbox } from '../utilities/constants'; //const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n// check bounding box \n\nconst checkBbox = bbox => {\n  if (bbox[0] < maxbbox.west) {\n    bbox[0] = maxbbox.west;\n  }\n\n  if (bbox[1] < maxbbox.south) {\n    bbox[1] = maxbbox.south;\n  }\n\n  if (bbox[2] > maxbbox.east) {\n    bbox[2] = maxbbox.east;\n  }\n\n  if (bbox[3] > maxbbox.north) {\n    bbox[3] = maxbbox.north;\n  }\n\n  return bbox;\n}; // find bounding box around one or more states\n\n\nconst multiStateBbox = meta => {\n  var bbox = {\n    xn: 0,\n    xs: 999,\n    xw: 0,\n    xe: -999\n  };\n  meta.forEach(element => {\n    const [w, s, e, n] = [...element.bbox];\n\n    if (n > bbox.xn) {\n      bbox.xn = n;\n    }\n\n    if (s < bbox.xs) {\n      bbox.xs = s;\n    }\n\n    if (w < bbox.xw) {\n      bbox.xw = w;\n    }\n\n    if (e > bbox.xe) {\n      bbox.xe = e;\n    }\n  });\n  return [bbox.xw, bbox.xs, bbox.xe, bbox.xn];\n};\n\nconst fetchBbox = postals => {\n  const jsonparams = JSON.stringify({\n    state: postals,\n    meta: \"bbox\"\n  });\n  fetch(\"https://data.rcc-acis.org/General/state\", {\n    body: jsonparams,\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }).then(response => {\n    if (!response.ok) {\n      console.log(\"Error fetching state bbox\");\n      return;\n    }\n\n    return response.json();\n  }).then(response => {\n    if (response.meta && response.meta.length) {\n      let bbox = multiStateBbox(response.meta);\n      bbox = checkBbox(bbox);\n      return bbox;\n    } else {\n      console.log(\"No bbox for \" + postals);\n    }\n  }).catch(err => {\n    if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n      setResultsError(\"Invalid request\");\n    } else {\n      setResultsError(err.message);\n    }\n\n    ;\n  });\n};\n\nconst buildParams = input_params => {\n  let paramsToSubmit = {\n    grid: input_params.grid,\n    output: input_params.output\n  }; //console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\n  const mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n  const duration = mndiff + (mndiff >= 0 ? 1 : 13);\n  input_params.elems[0].duration = duration;\n  const newElems = [...input_params.elems];\n  newElems[0] = { ...newElems[0],\n    duration\n  };\n\n  if (newElems[0].name === 'all') {\n    newElems[0] = { ...newElems[0],\n      name: 'maxt',\n      reduce: elements[0].reduce\n    };\n    ['mint', 'avgt', 'pcpn'].forEach((elem, i) => {\n      newElems.push({ ...newElems[0],\n        name: elem,\n        reduce: elements[i + 1].reduce\n      });\n    });\n  }\n\n  paramsToSubmit.elems = newElems;\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  paramsToSubmit.date = newDate; // areaDef is type (e.g. state, loc, bbox) and value of area of interest.\n\n  console.log(input_params.areaDef);\n\n  if (input_params.areaDef.bbox) {\n    input_params.areaDef.bbox = checkBbox(input_params.areaDef.bbox);\n    console.log(input_params.areaDef.bbox);\n  } else if (input_params.areaDef.loc) {\n    console.log(\"check for allowable coordinates\");\n  } else if (input_params.areaDef.state) {\n    const postals = input_params.areaDef.state;\n    input_params.areaDef.bbox = fetchBbox(postals);\n  } else {\n    console.log(\"unknown\");\n  }\n\n  paramsToSubmit = { ...paramsToSubmit,\n    ...input_params.areaDef\n  }; // point location can only be json\n\n  if (paramsToSubmit.loc) {\n    paramsToSubmit = { ...paramsToSubmit,\n      output: \"json\"\n    };\n  }\n\n  return paramsToSubmit;\n}; // download a retrieved gif image\n\n\nconst downloadFile = (href, filename) => {\n  const link = document.createElement('a');\n  link.href = href;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n}; // retrive and download a json file\n\n\nconst downloadFetch = (stringparams, filename, output) => {\n  const jsonparams = JSON.parse(stringparams);\n  const submitParams = JSON.stringify({ ...jsonparams,\n    output: output\n  });\n  fetch(\"https://grid2.rcc-acis.org/GridData\", {\n    body: submitParams,\n    method: \"POST\"\n  }).then(response => {\n    if (!response.ok) {\n      console.log(\"Error fetching the results\");\n      return;\n    }\n\n    return output === 'json' ? response.json() : response.blob();\n  }).then(response => {\n    var blob;\n\n    if (output === 'json') {\n      const json = JSON.stringify(response);\n      blob = new Blob([json], {\n        type: 'application/json'\n      });\n    } else {\n      blob = response;\n    }\n\n    const href = window.URL.createObjectURL(blob);\n    downloadFile(href, filename);\n  }).catch(err => {\n    if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n      console.log(\"Invalid grid request - \" + jsonparams);\n    } else {\n      console.log(err.message);\n    }\n\n    ;\n  });\n};\n\nexport { buildParams, checkBbox, multiStateBbox, downloadFile, downloadFetch };","map":{"version":3,"sources":["/Users/kle1/progs/React/ncei-normals-mapper/src/utilities/utils.js"],"names":["elements","maxbbox","checkBbox","bbox","west","south","east","north","multiStateBbox","meta","xn","xs","xw","xe","forEach","element","w","s","e","n","fetchBbox","postals","jsonparams","JSON","stringify","state","fetch","body","method","headers","then","response","ok","console","log","json","length","catch","err","message","includes","setResultsError","buildParams","input_params","paramsToSubmit","grid","output","mndiff","parseInt","edate","split","sdate","duration","elems","newElems","name","reduce","elem","i","push","newDate","interval","slice","date","areaDef","loc","downloadFile","href","filename","link","document","createElement","download","appendChild","click","removeChild","downloadFetch","stringparams","parse","submitParams","blob","Blob","type","window","URL","createObjectURL"],"mappings":"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","sourcesContent":["import { elements, maxbbox } from '../utilities/constants';\n\n//const dateDiff = (date1, date2) => {\n//\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n//\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n//\tconst one_day = 1000 * 60 * 60 * 24;\n//\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n//};\n\n// check bounding box \nconst checkBbox = bbox => {\n\tif (bbox[0] < maxbbox.west) {\n\t\tbbox[0] = maxbbox.west;\n\t}\n\tif (bbox[1] < maxbbox.south) {\n\t\tbbox[1] = maxbbox.south;\n\t}\n\tif (bbox[2] > maxbbox.east) {\n\t\tbbox[2] = maxbbox.east;\n\t}\n\tif (bbox[3] > maxbbox.north) {\n\t\tbbox[3] = maxbbox.north;\n\t}\n\treturn bbox;\n};\n\n// find bounding box around one or more states\nconst multiStateBbox = meta => {\n\tvar bbox = {xn:0, xs:999, xw:0, xe:-999};\n\tmeta.forEach(element => {\n\t\tconst [w, s, e, n] = [...element.bbox];\n\t\tif (n > bbox.xn) { bbox.xn = n; }\n\t\tif (s < bbox.xs) { bbox.xs = s; }\n\t\tif (w < bbox.xw) { bbox.xw = w; }\n\t\tif (e > bbox.xe) { bbox.xe = e; }\n\t});\n\treturn [bbox.xw,bbox.xs,bbox.xe,bbox.xn];\n};\n\nconst fetchBbox = postals => {\n\tconst jsonparams = JSON.stringify({state: postals, meta: \"bbox\"});\n\tfetch(\"https://data.rcc-acis.org/General/state\", {body: jsonparams, method: \"POST\", headers: {'Content-Type': 'application/json'}})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\tconsole.log(\"Error fetching state bbox\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn response.json();\n\t\t})\n\t\t.then(response => {\n\t\t\tif (response.meta && response.meta.length) {\n\t\t\t\tlet bbox = multiStateBbox(response.meta);\n\t\t\t\tbbox = checkBbox(bbox);\n\t\t\t\treturn bbox;\n\t\t\t} else {\n\t\t\t\tconsole.log(\"No bbox for \" + postals);\n\t\t\t}\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\tsetResultsError(\"Invalid request\");\n\t\t\t} else {\n\t\t\t\tsetResultsError(err.message);\n\t\t\t};\n\t\t})\n};\n\nconst buildParams = (input_params) => {\n\tlet paramsToSubmit = {grid: input_params.grid, output: input_params.output};\n\t//console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\tconst mndiff = parseInt(input_params.edate.split(\"-\")[1]) - parseInt(input_params.sdate.split(\"-\")[1]);\n\tconst duration = mndiff + (mndiff >= 0 ? 1 : 13);\n\tinput_params.elems[0].duration = duration;\n\t\n\tconst newElems = [...input_params.elems];\n\tnewElems[0] = {...newElems[0], duration};\n\n\tif (newElems[0].name === 'all') {\n\t\tnewElems[0] = {...newElems[0], name: 'maxt', reduce: elements[0].reduce};\n\t\t['mint','avgt','pcpn'].forEach((elem,i) => {\n\t\t\tnewElems.push({...newElems[0], name:elem, reduce: elements[i+1].reduce});\n\t\t});\n\t}\n\tparamsToSubmit.elems = newElems;\n\t\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tparamsToSubmit.date = newDate;\n\n\t// areaDef is type (e.g. state, loc, bbox) and value of area of interest.\n\tconsole.log(input_params.areaDef)\n\tif (input_params.areaDef.bbox) {\n\t\tinput_params.areaDef.bbox = checkBbox(input_params.areaDef.bbox);\n\t\tconsole.log(input_params.areaDef.bbox)\n\t} else if (input_params.areaDef.loc) {\n\t\tconsole.log(\"check for allowable coordinates\");\n\t} else if (input_params.areaDef.state) {\n\t\tconst postals = input_params.areaDef.state;\n\t\tinput_params.areaDef.bbox = fetchBbox(postals);\n\t} else {\n\t\tconsole.log(\"unknown\");\n\t}\n\tparamsToSubmit = {...paramsToSubmit, ...input_params.areaDef};\n\t\n\t// point location can only be json\n\tif (paramsToSubmit.loc) {\n\t\tparamsToSubmit = {...paramsToSubmit, output: \"json\"};\n\t}\n\n\treturn paramsToSubmit;\t\n};\n\n\n// download a retrieved gif image\nconst downloadFile = (href, filename) => {\n\tconst link = document.createElement('a');\n\tlink.href = href;\n\tlink.download = filename;\n\tdocument.body.appendChild(link);\n\tlink.click();\n\tdocument.body.removeChild(link);\n};\n\n// retrive and download a json file\nconst downloadFetch = (stringparams, filename, output) => {\n\tconst jsonparams = JSON.parse(stringparams);\n\tconst submitParams = JSON.stringify({...jsonparams, output:output});\n\tfetch(\"https://grid2.rcc-acis.org/GridData\", {body: submitParams, method: \"POST\"})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\tconsole.log(\"Error fetching the results\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn output === 'json' ? response.json() : response.blob();\n\t\t})\n\t\t.then(response => {\n\t\t\tvar blob;\n\t\t\tif (output === 'json') {\n\t\t\t\tconst json = JSON.stringify(response);\n  \t\t\t\tblob = new Blob([json], {type:'application/json'});\n\t\t\t} else {\n\t\t\t\tblob = response;\n\t\t\t}\n\t\t\tconst href = window.URL.createObjectURL(blob);\n\t\t\tdownloadFile(href, filename)\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\tconsole.log(\"Invalid grid request - \"+jsonparams);\n\t\t\t} else {\n\t\t\t\tconsole.log(err.message);\n\t\t\t};\n\t\t});\n};\n\nexport { buildParams, checkBbox, multiStateBbox, downloadFile, downloadFetch };"]},"metadata":{},"sourceType":"module"}