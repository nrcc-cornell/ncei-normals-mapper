{"ast":null,"code":"const dateDiff = (date1, date2) => {\n  const sdate = date1 instanceof Date ? date1 : new Date(date1);\n  const edate = date2 instanceof Date ? date2 : new Date(date2);\n  const one_day = 1000 * 60 * 60 * 24;\n  return Math.round((edate.getTime() - sdate.getTime()) / one_day);\n};\n\nconst buildParams = input_params => {\n  // console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n  //  do this on a copy, retaining sdate and edate for subsequent requests.\n  var duration;\n\n  if (input_params.elems[0].duration === 1) {\n    duration = 1;\n  } else if (input_params.sdate <= input_params.edate) {\n    duration = dateDiff(input_params.sdate, input_params.edate) + 1;\n  } else {\n    // dates wrap around year border\n    const newStart = new Date(input_params.sdate);\n    newStart.setFullYear(2018);\n    duration = dateDiff(newStart, input_params.edate) + 1;\n  }\n\n  const newElems = input_params.elems;\n  newElems[0] = { ...newElems[0],\n    duration\n  };\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  const paramsToSubmit = { ...input_params,\n    date: newDate,\n    elems: newElems\n  };\n  delete paramsToSubmit.sdate;\n  delete paramsToSubmit.edate; // areaType is only used to determine whether to send \"state\" or \"bbox\"; delete other. Do not send areaType in call.\n\n  if (input_params.areaType === 'bbox') {\n    delete paramsToSubmit.state;\n    paramsToSubmit.bbox = paramsToSubmit.bbox && paramsToSubmit.bbox.length === 4 ? paramsToSubmit.bbox.join(\",\") : \"\";\n  } else {\n    delete paramsToSubmit.bbox;\n  }\n\n  delete paramsToSubmit.areaType;\n  return JSON.stringify(paramsToSubmit);\n};\n\nconst fetchGeneral = props => {\n  const {\n    postals,\n    setFetchError,\n    setLoading\n  } = props;\n  const jsonparams = JSON.stringify({\n    params: {\n      state: postals,\n      meta: \"name,id\"\n    }\n  });\n  fetch(\"https://data.rcc-acis.org/General/county\", {\n    body: jsonparams,\n    method: \"POST\"\n  }).then(response => {\n    if (!response.ok) {\n      setFetchError(\"Error fetching the list\");\n      return;\n    }\n\n    return response.json();\n  }).catch(err => {\n    if (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n      setFetchError(\"Invalid request\");\n    } else {\n      setFetchError(err.message);\n    }\n\n    ;\n  }).finally(() => {\n    setLoading(false);\n  });\n};\n\nexport { buildParams, fetchGeneral };","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","buildParams","input_params","duration","elems","newStart","setFullYear","newElems","newDate","interval","length","slice","paramsToSubmit","date","areaType","state","bbox","join","JSON","stringify","fetchGeneral","props","postals","setFetchError","setLoading","jsonparams","params","meta","fetch","body","method","then","response","ok","json","catch","err","message","includes","finally"],"mappings":"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","sourcesContent":["const dateDiff = (date1, date2) => {\n\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n\tconst one_day = 1000 * 60 * 60 * 24;\n\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n};\n\t\nconst buildParams = (input_params) => {\n\t// console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n\t//  do this on a copy, retaining sdate and edate for subsequent requests.\n\tvar duration;\n\tif (input_params.elems[0].duration === 1) {\n\t\tduration = 1;\n\t} else if (input_params.sdate <= input_params.edate) {\n\t\tduration =  dateDiff(input_params.sdate, input_params.edate) + 1;\n\t} else {\n\t\t// dates wrap around year border\n\t\tconst newStart = new Date(input_params.sdate);\n\t\tnewStart.setFullYear(2018);\n\t\tduration = dateDiff(newStart, input_params.edate) + 1;\n\t}\n\tconst newElems = input_params.elems;\n\tnewElems[0] = {...newElems[0], duration};\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tconst paramsToSubmit = {...input_params, date: newDate, elems: newElems};\n\tdelete paramsToSubmit.sdate;\n\tdelete paramsToSubmit.edate;\n\t// areaType is only used to determine whether to send \"state\" or \"bbox\"; delete other. Do not send areaType in call.\n\tif (input_params.areaType === 'bbox') {\n\t\tdelete paramsToSubmit.state;\n\t\tparamsToSubmit.bbox = paramsToSubmit.bbox && paramsToSubmit.bbox.length === 4 ? paramsToSubmit.bbox.join(\",\") : \"\";\n\t} else {\n\t\tdelete paramsToSubmit.bbox;\n\t}\n\tdelete paramsToSubmit.areaType;\n\treturn JSON.stringify(paramsToSubmit);\t\n};\n\nconst fetchGeneral = (props) => {\n\tconst { postals, setFetchError, setLoading } = props;\n\tconst jsonparams = JSON.stringify({params:{state: postals, meta: \"name,id\"}});\n\tfetch(\"https://data.rcc-acis.org/General/county\", {body: jsonparams, method: \"POST\"})\n\t\t.then(response => {\n\t\t\tif (!response.ok) {\n\t\t\t\tsetFetchError(\"Error fetching the list\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn response.json()\n\t\t})\n\t\t.catch(err => {\n\t\t\tif (err.message.includes(\"Failed to execute 'createObjectURL' on 'URL'\")) {\n\t\t\t\tsetFetchError(\"Invalid request\");\n\t\t\t} else {\n\t\t\t\tsetFetchError(err.message);\n\t\t\t};\n\t\t})\n\t\t.finally(() => {\n\t\t\tsetLoading(false);\n\t\t});\n};\n\n\nexport { buildParams, fetchGeneral };"]},"metadata":{},"sourceType":"module"}