{"ast":null,"code":"const dateDiff = (date1, date2) => {\n  const sdate = date1 instanceof Date ? date1 : new Date(date1);\n  const edate = date2 instanceof Date ? date2 : new Date(date2);\n  const one_day = 1000 * 60 * 60 * 24;\n  return Math.round((edate.getTime() - sdate.getTime()) / one_day);\n};\n\nconst buildParams = input_params => {\n  // console.log(input_params) // for debugging\n  // For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n  //  do this on a copy, retaining sdate and edate for subsequent requests.\n  var duration;\n\n  if (input_params.elems[0].duration === 1) {\n    duration = 1;\n  } else if (input_params.sdate <= input_params.edate) {\n    duration = dateDiff(input_params.sdate, input_params.edate) + 1;\n  } else {\n    // dates wrap around year border\n    const newStart = new Date(input_params.sdate);\n    newStart.setFullYear(2018);\n    duration = dateDiff(newStart, input_params.edate) + 1;\n  }\n\n  const newElems = input_params.elems;\n  newElems[0] = { ...newElems[0],\n    duration\n  };\n  const newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n  const paramsToSubmit = { ...input_params,\n    date: newDate,\n    elems: newElems\n  };\n  delete paramsToSubmit.sdate;\n  delete paramsToSubmit.edate; // areaType and stateType only used to determine whether to send \"state\" or \"bbox\"; remove other. Do not send areaType or stateType in call.\n\n  if (input_params.areaType === \"region\" || input_params.areaType === \"state\" && input_params.stateType === \"all\") {\n    delete paramsToSubmit.bbox;\n  } else {\n    delete paramsToSubmit.state;\n    paramsToSubmit.bbox = paramsToSubmit.bbox && paramsToSubmit.bbox.length === 4 ? paramsToSubmit.bbox.join(\",\") : \"\";\n  }\n\n  delete paramsToSubmit.areaType;\n  return JSON.stringify(paramsToSubmit);\n};\n\nexport { buildParams };","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","buildParams","input_params","duration","elems","newStart","setFullYear","newElems","newDate","interval","length","slice","paramsToSubmit","date","areaType","stateType","bbox","state","join","JSON","stringify"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAClC,QAAMC,KAAK,GAAGF,KAAK,YAAYG,IAAjB,GAAwBH,KAAxB,GAAgC,IAAIG,IAAJ,CAASH,KAAT,CAA9C;AACA,QAAMI,KAAK,GAAGH,KAAK,YAAYE,IAAjB,GAAwBF,KAAxB,GAAgC,IAAIE,IAAJ,CAASF,KAAT,CAA9C;AACA,QAAMI,OAAO,GAAG,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjC;AACA,SAAQC,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,CAACI,OAAN,KAAkBN,KAAK,CAACM,OAAN,EAAnB,IAAsCH,OAAjD,CAAR;AACA,CALD;;AAOA,MAAMI,WAAW,GAAIC,YAAD,IAAkB;AACrC;AACA;AACA;AACA,MAAIC,QAAJ;;AACA,MAAID,YAAY,CAACE,KAAb,CAAmB,CAAnB,EAAsBD,QAAtB,KAAmC,CAAvC,EAA0C;AACzCA,IAAAA,QAAQ,GAAG,CAAX;AACA,GAFD,MAEO,IAAID,YAAY,CAACR,KAAb,IAAsBQ,YAAY,CAACN,KAAvC,EAA8C;AACpDO,IAAAA,QAAQ,GAAIZ,QAAQ,CAACW,YAAY,CAACR,KAAd,EAAqBQ,YAAY,CAACN,KAAlC,CAAR,GAAmD,CAA/D;AACA,GAFM,MAEA;AACN;AACA,UAAMS,QAAQ,GAAG,IAAIV,IAAJ,CAASO,YAAY,CAACR,KAAtB,CAAjB;AACAW,IAAAA,QAAQ,CAACC,WAAT,CAAqB,IAArB;AACAH,IAAAA,QAAQ,GAAGZ,QAAQ,CAACc,QAAD,EAAWH,YAAY,CAACN,KAAxB,CAAR,GAAyC,CAApD;AACA;;AACD,QAAMW,QAAQ,GAAGL,YAAY,CAACE,KAA9B;AACAG,EAAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,EAAC,GAAGA,QAAQ,CAAC,CAAD,CAAZ;AAAiBJ,IAAAA;AAAjB,GAAd;AACA,QAAMK,OAAO,GAAGN,YAAY,CAACE,KAAb,CAAmB,CAAnB,EAAsBK,QAAtB,CAA+BC,MAA/B,KAA0C,CAA1C,GAA8CR,YAAY,CAACN,KAAb,CAAmBe,KAAnB,CAAyB,CAAzB,EAA4B,CAA5B,CAA9C,GAA+ET,YAAY,CAACN,KAA5G;AACA,QAAMgB,cAAc,GAAG,EAAC,GAAGV,YAAJ;AAAkBW,IAAAA,IAAI,EAAEL,OAAxB;AAAiCJ,IAAAA,KAAK,EAAEG;AAAxC,GAAvB;AACA,SAAOK,cAAc,CAAClB,KAAtB;AACA,SAAOkB,cAAc,CAAChB,KAAtB,CApBqC,CAsBrC;;AACA,MAAIM,YAAY,CAACY,QAAb,KAA0B,QAA1B,IAAuCZ,YAAY,CAACY,QAAb,KAA0B,OAA1B,IAAqCZ,YAAY,CAACa,SAAb,KAA2B,KAA3G,EAAmH;AAClH,WAAOH,cAAc,CAACI,IAAtB;AACA,GAFD,MAEO;AACN,WAAOJ,cAAc,CAACK,KAAtB;AACAL,IAAAA,cAAc,CAACI,IAAf,GAAsBJ,cAAc,CAACI,IAAf,IAAuBJ,cAAc,CAACI,IAAf,CAAoBN,MAApB,KAA+B,CAAtD,GAA0DE,cAAc,CAACI,IAAf,CAAoBE,IAApB,CAAyB,GAAzB,CAA1D,GAA0F,EAAhH;AACA;;AACD,SAAON,cAAc,CAACE,QAAtB;AACA,SAAOK,IAAI,CAACC,SAAL,CAAeR,cAAf,CAAP;AACA,CA/BD;;AAiCA,SAASX,WAAT","sourcesContent":["const dateDiff = (date1, date2) => {\n\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n\tconst one_day = 1000 * 60 * 60 * 24;\n\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n};\n\t\nconst buildParams = (input_params) => {\n\t// console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n\t//  do this on a copy, retaining sdate and edate for subsequent requests.\n\tvar duration;\n\tif (input_params.elems[0].duration === 1) {\n\t\tduration = 1;\n\t} else if (input_params.sdate <= input_params.edate) {\n\t\tduration =  dateDiff(input_params.sdate, input_params.edate) + 1;\n\t} else {\n\t\t// dates wrap around year border\n\t\tconst newStart = new Date(input_params.sdate);\n\t\tnewStart.setFullYear(2018);\n\t\tduration = dateDiff(newStart, input_params.edate) + 1;\n\t}\n\tconst newElems = input_params.elems;\n\tnewElems[0] = {...newElems[0], duration};\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tconst paramsToSubmit = {...input_params, date: newDate, elems: newElems};\n\tdelete paramsToSubmit.sdate;\n\tdelete paramsToSubmit.edate;\n\n\t// areaType and stateType only used to determine whether to send \"state\" or \"bbox\"; remove other. Do not send areaType or stateType in call.\n\tif (input_params.areaType === \"region\" || (input_params.areaType === \"state\" && input_params.stateType === \"all\")) {\n\t\tdelete paramsToSubmit.bbox;\n\t} else {\n\t\tdelete paramsToSubmit.state;\n\t\tparamsToSubmit.bbox = paramsToSubmit.bbox && paramsToSubmit.bbox.length === 4 ? paramsToSubmit.bbox.join(\",\") : \"\";\n\t}\n\tdelete paramsToSubmit.areaType;\n\treturn JSON.stringify(paramsToSubmit);\t\n};\n\nexport { buildParams };"]},"metadata":{},"sourceType":"module"}