{"ast":null,"code":"import _objectSpread from\"/Users/kle1/progs/React/normals-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/kle1/progs/React/normals-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";var dateDiff=function dateDiff(date1,date2){var sdate=date1 instanceof Date?date1:new Date(date1);var edate=date2 instanceof Date?date2:new Date(date2);var one_day=1000*60*60*24;return Math.round((edate.getTime()-sdate.getTime())/one_day);};var buildParams=function buildParams(input_params){// console.log(input_params) // for debugging\n// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n//  do this on a copy, retaining sdate and edate for subsequent requests.\nvar duration;if(input_params.elems[0].duration===1){duration=1;}else if(input_params.sdate<=input_params.edate){duration=dateDiff(input_params.sdate,input_params.edate)+1;}else{// dates wrap around year border\nvar newStart=new Date(input_params.sdate);newStart.setFullYear(2018);duration=dateDiff(newStart,input_params.edate)+1;}var newElems=_toConsumableArray(input_params.elems);newElems[0]=_objectSpread(_objectSpread({},newElems[0]),{},{duration:duration});var newDate=input_params.elems[0].interval.length===2?input_params.edate.slice(0,7):input_params.edate;var paramsToSubmit=_objectSpread(_objectSpread({},input_params),{},{date:newDate,elems:newElems});delete paramsToSubmit.sdate;delete paramsToSubmit.edate;// areaType is only used to determine whether to send \"state\" or \"bbox\"; delete other. Do not send areaType in call.\nif(input_params.areaType==='bbox'){delete paramsToSubmit.state;paramsToSubmit.bbox=paramsToSubmit.bbox&&paramsToSubmit.bbox.length===4?paramsToSubmit.bbox.join(\",\"):\"\";}else{delete paramsToSubmit.bbox;}delete paramsToSubmit.areaType;return JSON.stringify(paramsToSubmit);};export{buildParams};","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","buildParams","input_params","duration","elems","newStart","setFullYear","newElems","newDate","interval","length","slice","paramsToSubmit","date","areaType","state","bbox","join","JSON","stringify"],"mappings":"iUAAA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAQC,KAAR,CAAkB,CAClC,GAAMC,CAAAA,KAAK,CAAGF,KAAK,WAAYG,CAAAA,IAAjB,CAAwBH,KAAxB,CAAgC,GAAIG,CAAAA,IAAJ,CAASH,KAAT,CAA9C,CACA,GAAMI,CAAAA,KAAK,CAAGH,KAAK,WAAYE,CAAAA,IAAjB,CAAwBF,KAAxB,CAAgC,GAAIE,CAAAA,IAAJ,CAASF,KAAT,CAA9C,CACA,GAAMI,CAAAA,OAAO,CAAG,KAAO,EAAP,CAAY,EAAZ,CAAiB,EAAjC,CACA,MAAQC,CAAAA,IAAI,CAACC,KAAL,CAAW,CAACH,KAAK,CAACI,OAAN,GAAkBN,KAAK,CAACM,OAAN,EAAnB,EAAsCH,OAAjD,CAAR,CACA,CALD,CAOA,GAAMI,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,YAAD,CAAkB,CACrC;AACA;AACA;AACA,GAAIC,CAAAA,QAAJ,CACA,GAAID,YAAY,CAACE,KAAb,CAAmB,CAAnB,EAAsBD,QAAtB,GAAmC,CAAvC,CAA0C,CACzCA,QAAQ,CAAG,CAAX,CACA,CAFD,IAEO,IAAID,YAAY,CAACR,KAAb,EAAsBQ,YAAY,CAACN,KAAvC,CAA8C,CACpDO,QAAQ,CAAIZ,QAAQ,CAACW,YAAY,CAACR,KAAd,CAAqBQ,YAAY,CAACN,KAAlC,CAAR,CAAmD,CAA/D,CACA,CAFM,IAEA,CACN;AACA,GAAMS,CAAAA,QAAQ,CAAG,GAAIV,CAAAA,IAAJ,CAASO,YAAY,CAACR,KAAtB,CAAjB,CACAW,QAAQ,CAACC,WAAT,CAAqB,IAArB,EACAH,QAAQ,CAAGZ,QAAQ,CAACc,QAAD,CAAWH,YAAY,CAACN,KAAxB,CAAR,CAAyC,CAApD,CACA,CACD,GAAMW,CAAAA,QAAQ,oBAAOL,YAAY,CAACE,KAApB,CAAd,CACAG,QAAQ,CAAC,CAAD,CAAR,gCAAkBA,QAAQ,CAAC,CAAD,CAA1B,MAA+BJ,QAAQ,CAARA,QAA/B,GACA,GAAMK,CAAAA,OAAO,CAAGN,YAAY,CAACE,KAAb,CAAmB,CAAnB,EAAsBK,QAAtB,CAA+BC,MAA/B,GAA0C,CAA1C,CAA8CR,YAAY,CAACN,KAAb,CAAmBe,KAAnB,CAAyB,CAAzB,CAA4B,CAA5B,CAA9C,CAA+ET,YAAY,CAACN,KAA5G,CACA,GAAMgB,CAAAA,cAAc,gCAAOV,YAAP,MAAqBW,IAAI,CAAEL,OAA3B,CAAoCJ,KAAK,CAAEG,QAA3C,EAApB,CACA,MAAOK,CAAAA,cAAc,CAAClB,KAAtB,CACA,MAAOkB,CAAAA,cAAc,CAAChB,KAAtB,CACA;AACA,GAAIM,YAAY,CAACY,QAAb,GAA0B,MAA9B,CAAsC,CACrC,MAAOF,CAAAA,cAAc,CAACG,KAAtB,CACAH,cAAc,CAACI,IAAf,CAAsBJ,cAAc,CAACI,IAAf,EAAuBJ,cAAc,CAACI,IAAf,CAAoBN,MAApB,GAA+B,CAAtD,CAA0DE,cAAc,CAACI,IAAf,CAAoBC,IAApB,CAAyB,GAAzB,CAA1D,CAA0F,EAAhH,CACA,CAHD,IAGO,CACN,MAAOL,CAAAA,cAAc,CAACI,IAAtB,CACA,CACD,MAAOJ,CAAAA,cAAc,CAACE,QAAtB,CACA,MAAOI,CAAAA,IAAI,CAACC,SAAL,CAAeP,cAAf,CAAP,CACA,CA9BD,CAgCA,OAASX,WAAT","sourcesContent":["const dateDiff = (date1, date2) => {\n\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n\tconst one_day = 1000 * 60 * 60 * 24;\n\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n};\n\t\nconst buildParams = (input_params) => {\n\t// console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate;\n\t//  do this on a copy, retaining sdate and edate for subsequent requests.\n\tvar duration;\n\tif (input_params.elems[0].duration === 1) {\n\t\tduration = 1;\n\t} else if (input_params.sdate <= input_params.edate) {\n\t\tduration =  dateDiff(input_params.sdate, input_params.edate) + 1;\n\t} else {\n\t\t// dates wrap around year border\n\t\tconst newStart = new Date(input_params.sdate);\n\t\tnewStart.setFullYear(2018);\n\t\tduration = dateDiff(newStart, input_params.edate) + 1;\n\t}\n\tconst newElems = [...input_params.elems];\n\tnewElems[0] = {...newElems[0], duration};\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tconst paramsToSubmit = {...input_params, date: newDate, elems: newElems};\n\tdelete paramsToSubmit.sdate;\n\tdelete paramsToSubmit.edate;\n\t// areaType is only used to determine whether to send \"state\" or \"bbox\"; delete other. Do not send areaType in call.\n\tif (input_params.areaType === 'bbox') {\n\t\tdelete paramsToSubmit.state;\n\t\tparamsToSubmit.bbox = paramsToSubmit.bbox && paramsToSubmit.bbox.length === 4 ? paramsToSubmit.bbox.join(\",\") : \"\";\n\t} else {\n\t\tdelete paramsToSubmit.bbox;\n\t}\n\tdelete paramsToSubmit.areaType;\n\treturn JSON.stringify(paramsToSubmit);\t\n};\n\nexport { buildParams };"]},"metadata":{},"sourceType":"module"}