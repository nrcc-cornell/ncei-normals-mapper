{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\nconst useStyles = makeStyles(theme => ({\n  colorsContainer: {\n    marginTop: \"0.75em\"\n  },\n  colorFormControl: {\n    width: \"100%\"\n  },\n  colorInputLabel: {\n    color: \"rgba(0,0,0,0.87)\"\n  },\n  colorbarContainer: {\n    margin: \"0 1em 0.5em 1em\",\n    width: \"unset\"\n  },\n  listContainer: {\n    border: \"1pt solid lightgray\",\n    padding: 0\n  },\n  errormsg: {\n    color: \"red\",\n    marginTop: \"6px\",\n    fontSize: \"90%\"\n  }\n}));\n\nconst ColorsSelect = () => {\n  _s();\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [selectedIndex, setSelectedIndex] = useState(13);\n  const [colors, setColors] = useState([]);\n  const [colorCount, setColorCount] = useState(0);\n  const [cmp, setCmp] = useState('Blues');\n  const [colorError, setColorError] = useState(false);\n  const classes = useStyles();\n  const inputContext = useContext(InputParamsContext);\n\n  const colormaps = require('../utilities/colorbrewer.json');\n\n  const colormap_keys = Object.keys(colormaps);\n\n  const handleClickListItem = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleMenuItemClick = (event, index, val) => {\n    setSelectedIndex(index);\n    setAnchorEl(null);\n    const levelcnt = inputContext.inputParams.image.levels && inputContext.inputParams.image.levels.length >= 0 ? inputContext.inputParams.image.levels.split(\",\").length : inputContext.levels.server.length;\n    setColorCount(inputContext.inputParams.image.levels.length + 1);\n\n    if (colormaps[val].hasOwnProperty(levelcnt + 1)) {\n      const newColors = colormaps[val][levelcnt + 1];\n      setColors(newColors);\n      setCmp(val);\n\n      if (inputContext.levels.client.length === 0) {\n        inputContext.updateInputParams({\n          image: { ...inputContext.inputParams.image,\n            cmap: newColors,\n            levels: inputContext.levels.server.join(\",\")\n          }\n        });\n      } else {\n        inputContext.updateInputParams({\n          image: { ...inputContext.inputParams.image,\n            cmap: newColors\n          }\n        });\n      }\n\n      setColorError(false);\n    } else {\n      setColors([]);\n      setCmp(null);\n      inputContext.updateInputParams({\n        image: { ...inputContext.inputParams.image,\n          cmap: []\n        }\n      });\n      setColorError(true);\n    }\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  useEffect(() => {\n    if (inputContext.colors.server) {\n      setColors(inputContext.colors.server);\n      setColorCount(inputContext.colors.server.length);\n      setColorError(false);\n    }\n  }, [inputContext.colors.server]);\n  useEffect(() => {\n    if (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0) {\n      const levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n      setColorCount(levelLength + 1);\n\n      if (colormaps[cmp].hasOwnProperty(levelLength + 1)) {\n        const newColors = colormaps[colormap_keys[selectedIndex]][levelLength + 1];\n        setColors(newColors);\n        setCmp(colormap_keys[selectedIndex]);\n        inputContext.updateInputParams({\n          image: { ...inputContext.inputParams.image,\n            cmap: newColors\n          }\n        });\n        setColorError(false);\n      } else {\n        setColors([]);\n        setCmp(null);\n        inputContext.updateInputParams({\n          image: { ...inputContext.inputParams.image,\n            cmap: []\n          }\n        });\n        setColorError(levelLength === 1 ? false : true);\n      }\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [inputContext.inputParams.image.levels]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.colorsContainer,\n    children: [(inputContext.levels.client.length > 0 || inputContext.levels.server.length > 0) && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        className: classes.listContainer,\n        \"aria-label\": \"color selection\",\n        children: [/*#__PURE__*/_jsxDEV(ListItem, {\n          button: true,\n          \"aria-haspopup\": \"true\",\n          \"aria-controls\": \"color-map-menu\",\n          \"aria-label\": \"selected-color\",\n          onClick: handleClickListItem,\n          children: /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: \"Click to change color map\",\n            secondary: \"Currently selected: \" + cmp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 7\n        }, this), cmp && !colorError && colormaps[cmp].hasOwnProperty(colorCount) && /*#__PURE__*/_jsxDEV(TableContainer, {\n          className: classes.colorbarContainer,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            padding: \"none\",\n            \"aria-label\": \"color table\",\n            children: /*#__PURE__*/_jsxDEV(TableBody, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: colormaps[cmp][colorCount].map((cs, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n                  style: {\n                    width: \"1em\",\n                    backgroundColor: \"\" + cs + \"\"\n                  },\n                  children: \"\\xA0\"\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 13\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {\n        id: \"color-map-menu\",\n        anchorEl: anchorEl,\n        keepMounted: true,\n        open: Boolean(anchorEl),\n        onClose: handleClose,\n        children: colormap_keys.map((val, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n          selected: index === selectedIndex,\n          onClick: event => handleMenuItemClick(event, index, val),\n          children: /*#__PURE__*/_jsxDEV(TableContainer, {\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              padding: \"none\",\n              \"aria-label\": \"color table\",\n              children: /*#__PURE__*/_jsxDEV(TableBody, {\n                children: colormaps[val].hasOwnProperty(colorCount) && /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [colormaps[val][colorCount].map((cs, i) => /*#__PURE__*/_jsxDEV(TableCell, {\n                    style: {\n                      width: \"1em\",\n                      backgroundColor: \"\" + cs + \"\"\n                    },\n                    children: \"\\xA0\"\n                  }, i, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 163,\n                    columnNumber: 15\n                  }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n                    style: {\n                      paddingLeft: \"1em\"\n                    },\n                    children: val\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 165,\n                    columnNumber: 14\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 11\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 10\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 9\n          }, this)\n        }, val, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 8\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true), colorError && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      className: classes.errormsg,\n      gutterBottom: true,\n      children: infoText.colors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 3\n  }, this);\n};\n\n_s(ColorsSelect, \"m7skQYXAHr+th6e5QsWYgvYuEOc=\", false, function () {\n  return [useStyles];\n});\n\n_c = ColorsSelect;\nexport default ColorsSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorsSelect\");","map":{"version":3,"sources":["/Users/kle1/progs/React/ncei-normals-mapper/src/components/ColorsSelect.js"],"names":["React","useState","useEffect","useContext","makeStyles","Table","TableBody","TableCell","TableContainer","TableRow","List","ListItem","ListItemText","Menu","MenuItem","Typography","InputParamsContext","infoText","useStyles","theme","colorsContainer","marginTop","colorFormControl","width","colorInputLabel","color","colorbarContainer","margin","listContainer","border","padding","errormsg","fontSize","ColorsSelect","anchorEl","setAnchorEl","selectedIndex","setSelectedIndex","colors","setColors","colorCount","setColorCount","cmp","setCmp","colorError","setColorError","classes","inputContext","colormaps","require","colormap_keys","Object","keys","handleClickListItem","event","currentTarget","handleMenuItemClick","index","val","levelcnt","inputParams","image","levels","length","split","server","hasOwnProperty","newColors","client","updateInputParams","cmap","join","handleClose","levelLength","map","cs","i","backgroundColor","Boolean","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport InputParamsContext from './InputParamsContext';\nimport { infoText } from '../utilities/constants';\n\nconst useStyles = makeStyles((theme) => ({\n\tcolorsContainer: {\n\t\tmarginTop: \"0.75em\",\n\t},\n\tcolorFormControl: {\n\t\twidth: \"100%\",\n\t},\n\tcolorInputLabel: {\n\t\tcolor: \"rgba(0,0,0,0.87)\",\n\t},\n\tcolorbarContainer: {\n\t\tmargin:\"0 1em 0.5em 1em\",\n\t\twidth:\"unset\",\n\t},\n\tlistContainer: {\n\t\tborder: \"1pt solid lightgray\",\n\t\tpadding: 0,\n\t},\n\terrormsg: {\n\t\tcolor: \"red\",\n\t\tmarginTop: \"6px\",\n\t\tfontSize: \"90%\",\n\t},\n}));\n\nconst ColorsSelect = () => {\n\tconst [anchorEl, setAnchorEl] = useState(null);\n\tconst [selectedIndex, setSelectedIndex] = useState(13);\n\tconst [ colors, setColors ] = useState([]);\n\tconst [ colorCount, setColorCount ] = useState(0);\n\tconst [ cmp, setCmp ] = useState('Blues');\n\tconst [ colorError, setColorError ] = useState(false);\n\tconst classes = useStyles();\n\tconst inputContext = useContext(InputParamsContext);\n\n\tconst colormaps = require('../utilities/colorbrewer.json');\n\tconst colormap_keys = Object.keys(colormaps);\n\n\tconst handleClickListItem = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleMenuItemClick = (event, index, val) => {\n\t\tsetSelectedIndex(index);\n\t\tsetAnchorEl(null);\n\t\tconst levelcnt = (inputContext.inputParams.image.levels && inputContext.inputParams.image.levels.length >= 0) ? inputContext.inputParams.image.levels.split(\",\").length : inputContext.levels.server.length;\n\t\tsetColorCount(inputContext.inputParams.image.levels.length + 1);\n\t\tif (colormaps[val].hasOwnProperty(levelcnt + 1)) {\n\t\t\tconst newColors = colormaps[val][levelcnt + 1];\n\t\t\tsetColors(newColors);\n\t\t\tsetCmp(val);\n\t\t\tif (inputContext.levels.client.length === 0) {\n\t\t\t\tinputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newColors, levels: inputContext.levels.server.join(\",\")}});\n\t\t\t} else {\n\t\t\t\tinputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newColors}});\n\t\t\t}\n\t\t\tsetColorError(false);\n\t\t} else {\n\t\t\tsetColors([]);\n\t\t\tsetCmp(null);\n\t\t\tinputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: []}});\n\t\t\tsetColorError(true);\n\t\t}\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\tuseEffect(() => {\n\t\tif (inputContext.colors.server) {\n\t\t\tsetColors(inputContext.colors.server);\n\t\t\tsetColorCount(inputContext.colors.server.length);\n\t\t\tsetColorError(false);\n\t\t}\n\t}, [inputContext.colors.server]);\n\n\tuseEffect(() => {\n\t\tif (typeof inputContext.inputParams.image.levels === 'string' && inputContext.inputParams.image.levels.length >= 0) {\n\t\t\tconst levelLength = inputContext.inputParams.image.levels.split(\",\").length;\n\t\t\tsetColorCount(levelLength + 1);\n\t\t\tif (colormaps[cmp].hasOwnProperty(levelLength + 1)) {\n\t\t\t\tconst newColors = colormaps[colormap_keys[selectedIndex]][levelLength + 1];\n\t\t\t\tsetColors(newColors);\n\t\t\t\tsetCmp(colormap_keys[selectedIndex]);\n\t\t\t\tinputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: newColors}});\n\t\t\t\tsetColorError(false);\n\t\t\t} else {\n\t\t\t\tsetColors([]);\n\t\t\t\tsetCmp(null);\n\t\t\t\tinputContext.updateInputParams({image: {...inputContext.inputParams.image, cmap: []}});\n\t\t\t\tsetColorError(levelLength === 1 ? false : true);\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [inputContext.inputParams.image.levels]);\n\n\treturn ( \n\t\t<div className={classes.colorsContainer}>\n\t\t\t{(inputContext.levels.client.length > 0 || inputContext.levels.server.length > 0) &&\n\t\t\t\t<>\n\t\t\t\t\t<List className={classes.listContainer} aria-label=\"color selection\">\n\t\t\t\t\t\t<ListItem\n\t\t\t\t\t\t\tbutton\n\t\t\t\t\t\t\taria-haspopup=\"true\"\n\t\t\t\t\t\t\taria-controls=\"color-map-menu\"\n\t\t\t\t\t\t\taria-label=\"selected-color\"\n\t\t\t\t\t\t\tonClick={handleClickListItem}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ListItemText primary=\"Click to change color map\" secondary={\"Currently selected: \"+cmp} />\n\t\t\t\t\t\t</ListItem>\n\n\t\t\t\t\t\t{cmp && !colorError && colormaps[cmp].hasOwnProperty(colorCount) &&\n\t\t\t\t\t\t\t<TableContainer className={classes.colorbarContainer}>\n\t\t\t\t\t\t\t\t<Table size=\"small\" padding=\"none\" aria-label=\"color table\">\n\t\t\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t\t\t{colormaps[cmp][colorCount].map((cs, i) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={i} style={{width:\"1em\", backgroundColor:\"\" + cs + \"\"}}>&nbsp;</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</TableRow>\t\n\t\t\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</TableContainer>\n\t\t\t\t\t\t}\n\t\t\t\t\t</List>\n\n\t\t\t\t\t<Menu\n\t\t\t\t\t\tid=\"color-map-menu\"\n\t\t\t\t\t\tanchorEl={anchorEl}\n\t\t\t\t\t\tkeepMounted\n\t\t\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\t\t\tonClose={handleClose} \n\t\t\t\t\t>\n\t\t\t\t\t\t{colormap_keys.map((val, index) => (\n\t\t\t\t\t\t\t<MenuItem\n\t\t\t\t\t\t\t\tkey={val}\n\t\t\t\t\t\t\t\tselected={index === selectedIndex}\n\t\t\t\t\t\t\t\tonClick={(event) => handleMenuItemClick(event, index, val)}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<TableContainer>\n\t\t\t\t\t\t\t\t\t<Table padding=\"none\" aria-label=\"color table\">\n\t\t\t\t\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t\t\t\t\t{colormaps[val].hasOwnProperty(colorCount) &&\n\t\t\t\t\t\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{colormaps[val][colorCount].map((cs, i) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={i} style={{width:\"1em\", backgroundColor:\"\" + cs + \"\"}}>&nbsp;</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t\t\t\t<TableCell style={{paddingLeft:\"1em\"}}>{val}</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t\t</TableRow>\t\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t\t</TableContainer>\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</Menu>\n\t\t\t\t</>\n\t\t\t}\n\n\t\t\t{colorError &&\n\t\t\t\t<Typography variant=\"body1\" className={classes.errormsg} gutterBottom>\n\t\t\t\t\t{infoText.colors}\n\t\t\t\t</Typography>\n\t\t\t}\n\n\t\t</div>\n\t);\n}\n\nexport default ColorsSelect;"]},"metadata":{},"sourceType":"module"}