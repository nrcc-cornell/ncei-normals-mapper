{"ast":null,"code":"import _objectSpread from\"/Users/kle1/progs/React/normals-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/kle1/progs/React/normals-viewer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{elements}from'../utilities/constants';var dateDiff=function dateDiff(date1,date2){var sdate=date1 instanceof Date?date1:new Date(date1);var edate=date2 instanceof Date?date2:new Date(date2);var one_day=1000*60*60*24;return Math.round((edate.getTime()-sdate.getTime())/one_day);};var buildParams=function buildParams(input_params){var paramsToSubmit={grid:input_params.grid,output:input_params.output};//console.log(input_params) // for debugging\n// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\nvar duration;if(input_params.elems[0].duration===1){duration=1;}else if(input_params.sdate<=input_params.edate){duration=dateDiff(input_params.sdate,input_params.edate)+1;}else{// dates wrap around year border\nvar newStart=new Date(input_params.sdate);newStart.setFullYear(2018);duration=dateDiff(newStart,input_params.edate)+1;}var newElems=_toConsumableArray(input_params.elems);newElems[0]=_objectSpread(_objectSpread({},newElems[0]),{},{duration:duration});if(newElems[0].name==='all'){newElems[0]=_objectSpread(_objectSpread({},newElems[0]),{},{name:'maxt',reduce:elements[0].reduce});['mint','avgt','pcpn'].forEach(function(elem,i){newElems.push(_objectSpread(_objectSpread({},newElems[0]),{},{name:elem,reduce:elements[i+1].reduce}));});}paramsToSubmit.elems=newElems;var newDate=input_params.elems[0].interval.length===2?input_params.edate.slice(0,7):input_params.edate;paramsToSubmit.date=newDate;// areaDef is type (e.g. state, loc, county) and value of area of interest.\nparamsToSubmit=_objectSpread(_objectSpread({},paramsToSubmit),input_params.areaDef);// point location can only be json\nif(paramsToSubmit.loc){paramsToSubmit=_objectSpread(_objectSpread({},paramsToSubmit),{},{output:\"json\"});}return paramsToSubmit;};export{buildParams};","map":{"version":3,"sources":["/Users/kle1/progs/React/normals-viewer/src/utilities/utils.js"],"names":["elements","dateDiff","date1","date2","sdate","Date","edate","one_day","Math","round","getTime","buildParams","input_params","paramsToSubmit","grid","output","duration","elems","newStart","setFullYear","newElems","name","reduce","forEach","elem","i","push","newDate","interval","length","slice","date","areaDef","loc"],"mappings":"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","sourcesContent":["import { elements } from '../utilities/constants';\n\nconst dateDiff = (date1, date2) => {\n\tconst sdate = date1 instanceof Date ? date1 : new Date(date1);\n\tconst edate = date2 instanceof Date ? date2 : new Date(date2);\n\tconst one_day = 1000 * 60 * 60 * 24;\n\treturn (Math.round((edate.getTime() - sdate.getTime()) / one_day));\n};\n\t\nconst buildParams = (input_params) => {\n\tlet paramsToSubmit = {grid: input_params.grid, output: input_params.output};\n\t//console.log(input_params) // for debugging\n\t// For \"interval\" date selection, calculate duration based on sdate and edate. Also send just date instead of sdate and edate.\n\tvar duration;\n\tif (input_params.elems[0].duration === 1) {\n\t\tduration = 1;\n\t} else if (input_params.sdate <= input_params.edate) {\n\t\tduration =  dateDiff(input_params.sdate, input_params.edate) + 1;\n\t} else {\n\t\t// dates wrap around year border\n\t\tconst newStart = new Date(input_params.sdate);\n\t\tnewStart.setFullYear(2018);\n\t\tduration = dateDiff(newStart, input_params.edate) + 1;\n\t}\n\tconst newElems = [...input_params.elems];\n\tnewElems[0] = {...newElems[0], duration};\n\n\tif (newElems[0].name === 'all') {\n\t\tnewElems[0] = {...newElems[0], name: 'maxt', reduce: elements[0].reduce};\n\t\t['mint','avgt','pcpn'].forEach((elem,i) => {\n\t\t\tnewElems.push({...newElems[0], name:elem, reduce: elements[i+1].reduce});\n\t\t});\n\t}\n\tparamsToSubmit.elems = newElems;\n\t\n\tconst newDate = input_params.elems[0].interval.length === 2 ? input_params.edate.slice(0, 7) : input_params.edate;\n\tparamsToSubmit.date = newDate;\n\n\t// areaDef is type (e.g. state, loc, county) and value of area of interest.\n\tparamsToSubmit = {...paramsToSubmit, ...input_params.areaDef};\n\t\n\t// point location can only be json\n\tif (paramsToSubmit.loc) {\n\t\tparamsToSubmit = {...paramsToSubmit, output: \"json\"};\n\t}\n\n\treturn paramsToSubmit;\t\n};\n\nexport { buildParams };"]},"metadata":{},"sourceType":"module"}